// Original file name: d3d11.idl
// Conversion date: 2016-Mar-28 20:08:46.8177249
module directx.d3d11;

version(Windows):

import core.sys.windows.windows;

private mixin template DEFINE_GUID(ComType, alias IIDString)
{
  static if(!is(ComType : IUnknown))
  {
    pragma(msg, "Warning: The type " ~ ComType.stringof ~ " does not derive from IUnknown.");
  }

  // Format of a UUID:
  // [0  1  2  3  4  5  6  7]  8  [9  10 11 12] 13 [14 15 16 17] 18 [19 20] [21 22] 23 [24 25] [26 27] [28 29] [30 31] [32 33] [34 35]
  // [x  x  x  x  x  x  x  x]  -  [x  x  x  x ] -  [x  x  x  x ] -  [x  x ] [x  x ]  - [x  x ] [x  x ] [x  x ] [x  x ] [x  x ] [x  x ]
  static assert(IIDString.length == 36, "Malformed UUID string:\nGot:             %-36s\nExpected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".Format(IIDString));
  static assert(IIDString[8]  == '-',   "Malformed UUID string:\nGot:             %-36s\nExpected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".Format(IIDString));
  static assert(IIDString[13] == '-',   "Malformed UUID string:\nGot:             %-36s\nExpected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".Format(IIDString));
  static assert(IIDString[18] == '-',   "Malformed UUID string:\nGot:             %-36s\nExpected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".Format(IIDString));
  static assert(IIDString[23] == '-',   "Malformed UUID string:\nGot:             %-36s\nExpected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".Format(IIDString));

  private import std.format : format;

  mixin(format("immutable IID IID_%s "
               "= { 0x%s, 0x%s, 0x%s, [0x%s, 0x%s, 0x%s, 0x%s, 0x%s, 0x%s, 0x%s, 0x%s] };",
               ComType.stringof,
               IIDString[ 0 ..  8], // IID.Data1    <=> [xxxxxxxx]-xxxx-xxxx-xxxx-xxxxxxxxxxxx
               IIDString[ 9 .. 13], // IID.Data2    <=> xxxxxxxx-[xxxx]-xxxx-xxxx-xxxxxxxxxxxx
               IIDString[14 .. 18], // IID.Data3    <=> xxxxxxxx-xxxx-[xxxx]-xxxx-xxxxxxxxxxxx
               IIDString[19 .. 21], // IID.Data4[0] <=> xxxxxxxx-xxxx-xxxx-[xx]xx-xxxxxxxxxxxx
               IIDString[21 .. 23], // IID.Data4[1] <=> xxxxxxxx-xxxx-xxxx-xx[xx]-xxxxxxxxxxxx
               IIDString[24 .. 26], // IID.Data4[2] <=> xxxxxxxx-xxxx-xxxx-xxxx-[xx]xxxxxxxxxx
               IIDString[26 .. 28], // IID.Data4[3] <=> xxxxxxxx-xxxx-xxxx-xxxx-xx[xx]xxxxxxxx
               IIDString[28 .. 30], // IID.Data4[4] <=> xxxxxxxx-xxxx-xxxx-xxxx-xxxx[xx]xxxxxx
               IIDString[30 .. 32], // IID.Data4[5] <=> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxx[xx]xxxx
               IIDString[32 .. 34], // IID.Data4[6] <=> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx[xx]xx
               IIDString[34 .. 36], // IID.Data4[7] <=> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx[xx]
               ));

  /// Example: uuidof!IDXGIObject
  ref auto uuidof(T)() if(is(T == ComType)) { mixin("return IID_%s;".format(ComType.stringof)); }

  /// Example:
  ///   IDXGIObject Object = /* ... */;
  ///   auto Foo = Object.uuidof;
  ref auto uuidof(T)(auto ref in T) if(is(T == ComType)) { return uuidof!ComType; }
}

// Note: Everything below this line is automatically converted and likely to
// contain errors. You should manually check it for validity, if you care
// enough.


public import directx.dxgi;
public import directx.d3dcommon;

enum UINT D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
enum UINT D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
enum UINT D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
enum UINT D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
enum UINT D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
enum UINT D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum UINT D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
enum UINT D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum UINT D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
enum UINT D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum UINT D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
enum UINT D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
enum UINT D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
enum UINT D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
enum UINT D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
enum UINT D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
enum UINT D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
enum UINT D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
enum UINT D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
enum UINT D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
enum UINT D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
enum UINT D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
enum UINT D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
enum UINT D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
enum INT D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
enum INT D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
enum UINT D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
enum UINT D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
enum UINT D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
enum UINT D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
enum UINT D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
enum UINT D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
enum UINT D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
enum UINT D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
enum UINT D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
enum UINT D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
enum UINT D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
enum UINT D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
enum UINT D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
enum UINT D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
enum UINT D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
enum UINT D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
enum UINT D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
enum UINT D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
enum UINT D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
enum UINT D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
enum UINT D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
enum UINT D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
enum UINT D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
enum UINT D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
enum UINT D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
enum UINT D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
enum UINT D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
enum UINT D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
enum UINT D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
enum UINT D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
enum UINT D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
enum UINT D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
enum UINT D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
enum UINT D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
enum UINT D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
enum UINT D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
enum UINT D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
enum UINT D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
enum UINT D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
enum UINT D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
enum UINT D3D11_CS_TGSM_REGISTER_COUNT = 8192;
enum UINT D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum UINT D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum UINT D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
enum UINT D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1;
enum UINT D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
enum UINT D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
enum UINT D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
enum UINT D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
enum UINT D3D11_CS_THREADID_REGISTER_COMPONENTS = 3;
enum UINT D3D11_CS_THREADID_REGISTER_COUNT = 1;
enum UINT D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum UINT D3D11_CS_THREAD_GROUP_MAX_X = 1024;
enum UINT D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
enum UINT D3D11_CS_THREAD_GROUP_MAX_Z = 64;
enum UINT D3D11_CS_THREAD_GROUP_MIN_X = 1;
enum UINT D3D11_CS_THREAD_GROUP_MIN_Y = 1;
enum UINT D3D11_CS_THREAD_GROUP_MIN_Z = 1;
enum UINT D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;

enum D3D11_DEFAULT_BLEND_FACTOR_ALPHA     =	1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_BLUE      =	1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_GREEN     =	1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_RED       =	1.0f;
enum D3D11_DEFAULT_BORDER_COLOR_COMPONENT =	0.0f;

enum UINT D3D11_DEFAULT_DEPTH_BIAS = 0;
enum D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f;
enum UINT D3D11_DEFAULT_MAX_ANISOTROPY = 16;
enum D3D11_DEFAULT_MIP_LOD_BIAS = 0.0f;
enum UINT D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum UINT D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum UINT D3D11_DEFAULT_SCISSOR_ENDX = 0;
enum UINT D3D11_DEFAULT_SCISSOR_ENDY = 0;
enum UINT D3D11_DEFAULT_SCISSOR_STARTX = 0;
enum UINT D3D11_DEFAULT_SCISSOR_STARTY = 0;
enum D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f;
enum UINT D3D11_DEFAULT_STENCIL_READ_MASK = 0xff;
enum UINT D3D11_DEFAULT_STENCIL_REFERENCE = 0;
enum UINT D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum UINT D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
enum UINT D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;

enum D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f;
enum D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f;

enum UINT D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
enum UINT D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
enum UINT D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
enum UINT D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum UINT D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
enum UINT D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
enum UINT D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
enum UINT D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum UINT D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum UINT D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum UINT D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_DS_OUTPUT_REGISTER_COUNT = 32;

enum D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP      = 0.6;
enum D3D11_FLOAT32_MAX                         = 3.402823466e+38f;
enum D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
enum D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR  = 2.4f;
enum D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR    = 1.0f;
enum D3D11_FLOAT_TO_SRGB_OFFSET                = 0.055f;
enum D3D11_FLOAT_TO_SRGB_SCALE_1               = 12.92f;
enum D3D11_FLOAT_TO_SRGB_SCALE_2               = 1.055f;
enum D3D11_FLOAT_TO_SRGB_THRESHOLD             = 0.0031308f;
enum D3D11_FTOI_INSTRUCTION_MAX_INPUT          = 2147483647.999f;
enum D3D11_FTOI_INSTRUCTION_MIN_INPUT          = -2147483648.999f;
enum D3D11_FTOU_INSTRUCTION_MAX_INPUT          = 4294967295.999f;
enum D3D11_FTOU_INSTRUCTION_MIN_INPUT          = 0.0f;

enum UINT D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
enum UINT D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
enum UINT D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
enum UINT D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
enum UINT D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
enum UINT D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
enum UINT D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_GS_INPUT_REGISTER_COUNT = 32;
enum UINT D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_GS_INPUT_REGISTER_VERTICES = 32;
enum UINT D3D11_GS_MAX_INSTANCE_COUNT = 32;
enum UINT D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
enum UINT D3D11_GS_OUTPUT_ELEMENTS = 32;
enum UINT D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
enum UINT D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
enum UINT D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
enum UINT D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xFFFFFFFF;
enum UINT D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
enum UINT D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
enum UINT D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum UINT D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xFFFFFFFF;

enum D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f;
enum D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f;

enum UINT D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum UINT D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
enum UINT D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
enum UINT D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
enum UINT D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
enum UINT D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
enum UINT D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
enum UINT D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
enum UINT D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
enum UINT D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
enum UINT D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
enum UINT D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
enum UINT D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
enum UINT D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
enum UINT D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
enum UINT D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
enum UINT D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
enum UINT D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
enum UINT D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
enum UINT D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;

enum D3D11_LINEAR_GAMMA = 1.0f;

enum UINT D3D11_MAJOR_VERSION = 11;

enum D3D11_MAX_BORDER_COLOR_COMPONENT = 1.0f;
enum D3D11_MAX_DEPTH = 1.0f;

enum UINT D3D11_MAX_MAXANISOTROPY = 16;

enum UINT D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;

enum D3D11_MAX_POSITION_VALUE = 3.402823466e+34f;

enum UINT D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;

enum UINT D3D11_MINOR_VERSION = 0;

enum D3D11_MIN_BORDER_COLOR_COMPONENT = 0.0f;
enum D3D11_MIN_DEPTH = 0.0f;

enum UINT D3D11_MIN_MAXANISOTROPY = 0;

enum D3D11_MIP_LOD_BIAS_MAX = 15.99f;
enum D3D11_MIP_LOD_BIAS_MIN = -16.0f;

enum UINT D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;

enum UINT D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;

enum D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;

enum UINT D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
enum UINT D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
enum UINT D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum UINT D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
enum UINT D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
enum UINT D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
enum UINT D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
enum UINT D3D11_PS_FRONTFACING_DEFAULT_VALUE = 0xFFFFFFFF;
enum UINT D3D11_PS_FRONTFACING_FALSE_VALUE = 0x00000000;
enum UINT D3D11_PS_FRONTFACING_TRUE_VALUE = 0xFFFFFFFF;
enum UINT D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_PS_INPUT_REGISTER_COUNT = 32;
enum UINT D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;

enum D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0f;

enum UINT D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
enum UINT D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
enum UINT D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
enum UINT D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
enum UINT D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_PS_OUTPUT_REGISTER_COUNT = 8;

enum D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;

enum UINT D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
enum UINT D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
enum UINT D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
enum UINT D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum UINT D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
enum UINT D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
enum UINT D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
enum UINT D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
enum UINT D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
enum UINT D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum UINT D3D11_REQ_MAXANISOTROPY = 16;
enum UINT D3D11_REQ_MIP_LEVELS = 15;
enum UINT D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
enum UINT D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
enum UINT D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
enum UINT D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;

enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;

enum UINT D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
enum UINT D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
enum UINT D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
enum UINT D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
enum UINT D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
enum UINT D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
enum UINT D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
enum UINT D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
enum UINT D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
enum UINT D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
enum UINT D3D11_SHADER_MAJOR_VERSION = 5;
enum UINT D3D11_SHADER_MAX_INSTANCES = 65535;
enum UINT D3D11_SHADER_MAX_INTERFACES = 253;
enum UINT D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
enum UINT D3D11_SHADER_MAX_TYPES = 65535;
enum UINT D3D11_SHADER_MINOR_VERSION = 0;
enum UINT D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
enum UINT D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
enum UINT D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
enum UINT D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
enum UINT D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
enum UINT D3D11_SO_BUFFER_SLOT_COUNT = 4;
enum UINT D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
enum UINT D3D11_SO_NO_RASTERIZED_STREAM = 0xffffffff;
enum UINT D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
enum UINT D3D11_SO_STREAM_COUNT = 4;
enum UINT D3D11_SPEC_DATE_DAY = 16;
enum UINT D3D11_SPEC_DATE_MONTH = 05;
enum UINT D3D11_SPEC_DATE_YEAR = 2011;

enum D3D11_SPEC_VERSION = 1.07;
enum D3D11_SRGB_GAMMA = 2.2f;
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f;
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f;
enum D3D11_SRGB_TO_FLOAT_EXPONENT = 2.4f;
enum D3D11_SRGB_TO_FLOAT_OFFSET = 0.055f;
enum D3D11_SRGB_TO_FLOAT_THRESHOLD = 0.04045f;
enum D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f;

enum UINT D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
enum UINT D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
enum UINT D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
enum UINT D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
enum UINT D3D11_STANDARD_VECTOR_SIZE = 4;
enum UINT D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
enum UINT D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
enum UINT D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
enum UINT D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
enum UINT D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
enum UINT D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
enum UINT D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
enum UINT D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
enum UINT D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
enum UINT D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
enum UINT D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
enum UINT D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum UINT D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
enum UINT D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
enum UINT D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
enum UINT D3D11_VIEWPORT_BOUNDS_MAX = 32767;
enum INT D3D11_VIEWPORT_BOUNDS_MIN = -32768;
enum UINT D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_VS_INPUT_REGISTER_COUNT = 32;
enum UINT D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
enum UINT D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
enum UINT D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
enum UINT D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum UINT D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
enum UINT D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
enum UINT D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
enum UINT D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;

enum UINT D3D11_1_UAV_SLOT_COUNT = 64;

enum UINT D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;

enum UINT _FACD3D11 = 0x87c;

enum UINT _FACD3D11DEBUG = _FACD3D11 + 1;

alias MAKE_D3D11_HRESULT = (code) => MAKE_HRESULT(1, _FACD3D11, code);
alias MAKE_D3D11_STATUS  = (code) => MAKE_HRESULT(0, _FACD3D11, code);

alias D3D11_INPUT_CLASSIFICATION = int;
enum : D3D11_INPUT_CLASSIFICATION
{
  D3D11_INPUT_PER_VERTEX_DATA   = 0,
  D3D11_INPUT_PER_INSTANCE_DATA = 1,
}

enum UINT D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;

struct D3D11_INPUT_ELEMENT_DESC
{
  LPCSTR SemanticName;
  UINT SemanticIndex;
  DXGI_FORMAT Format;
  UINT InputSlot;
  UINT AlignedByteOffset;
  D3D11_INPUT_CLASSIFICATION InputSlotClass;
  UINT InstanceDataStepRate;
}

alias D3D11_FILL_MODE = int;
enum : D3D11_FILL_MODE
{
  D3D11_FILL_WIREFRAME = 2,
  D3D11_FILL_SOLID     = 3,
}

alias D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;

alias D3D11_PRIMITIVE = D3D_PRIMITIVE;

alias D3D11_CULL_MODE = int;
enum : D3D11_CULL_MODE
{
  D3D11_CULL_NONE  = 1,
  D3D11_CULL_FRONT = 2,
  D3D11_CULL_BACK  = 3,
}

struct D3D11_SO_DECLARATION_ENTRY
{
  UINT Stream;
  LPCSTR SemanticName;
  UINT SemanticIndex;
  BYTE StartComponent;
  BYTE ComponentCount;
  BYTE OutputSlot;
}

struct D3D11_VIEWPORT
{
  FLOAT TopLeftX;
  FLOAT TopLeftY;
  FLOAT Width;
  FLOAT Height;
  FLOAT MinDepth;
  FLOAT MaxDepth;
}

struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
{
  UINT VertexCountPerInstance;
  UINT InstanceCount;
  UINT StartVertexLocation;
  UINT StartInstanceLocation;
}

struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
{
  UINT IndexCountPerInstance;
  UINT InstanceCount;
  UINT StartIndexLocation;
  INT BaseVertexLocation;
  UINT StartInstanceLocation;
}

alias D3D11_RESOURCE_DIMENSION = int;
enum : D3D11_RESOURCE_DIMENSION
{
  D3D11_RESOURCE_DIMENSION_UNKNOWN   = 0,
  D3D11_RESOURCE_DIMENSION_BUFFER    = 1,
  D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
  D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
  D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4,
}

alias D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;

alias D3D11_DSV_DIMENSION = int;
enum : D3D11_DSV_DIMENSION
{
  D3D11_DSV_DIMENSION_UNKNOWN          = 0,
  D3D11_DSV_DIMENSION_TEXTURE1D        = 1,
  D3D11_DSV_DIMENSION_TEXTURE1DARRAY   = 2,
  D3D11_DSV_DIMENSION_TEXTURE2D        = 3,
  D3D11_DSV_DIMENSION_TEXTURE2DARRAY   = 4,
  D3D11_DSV_DIMENSION_TEXTURE2DMS      = 5,
  D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
}

alias D3D11_RTV_DIMENSION = int;
enum : D3D11_RTV_DIMENSION
{
  D3D11_RTV_DIMENSION_UNKNOWN          = 0,
  D3D11_RTV_DIMENSION_BUFFER           = 1,
  D3D11_RTV_DIMENSION_TEXTURE1D        = 2,
  D3D11_RTV_DIMENSION_TEXTURE1DARRAY   = 3,
  D3D11_RTV_DIMENSION_TEXTURE2D        = 4,
  D3D11_RTV_DIMENSION_TEXTURE2DARRAY   = 5,
  D3D11_RTV_DIMENSION_TEXTURE2DMS      = 6,
  D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D11_RTV_DIMENSION_TEXTURE3D        = 8,
}

alias D3D11_UAV_DIMENSION = int;
enum : D3D11_UAV_DIMENSION
{
  D3D11_UAV_DIMENSION_UNKNOWN        = 0,
  D3D11_UAV_DIMENSION_BUFFER         = 1,
  D3D11_UAV_DIMENSION_TEXTURE1D      = 2,
  D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D11_UAV_DIMENSION_TEXTURE2D      = 4,
  D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D11_UAV_DIMENSION_TEXTURE3D      = 8,
}

alias D3D11_USAGE = int;
enum : D3D11_USAGE
{
  D3D11_USAGE_DEFAULT   = 0,
  D3D11_USAGE_IMMUTABLE = 1,
  D3D11_USAGE_DYNAMIC   = 2,
  D3D11_USAGE_STAGING   = 3,
}

alias D3D11_BIND_FLAG = int;
enum : D3D11_BIND_FLAG
{
  D3D11_BIND_VERTEX_BUFFER    = 0x00000001L,
  D3D11_BIND_INDEX_BUFFER     = 0x00000002L,
  D3D11_BIND_CONSTANT_BUFFER  = 0x00000004L,
  D3D11_BIND_SHADER_RESOURCE  = 0x00000008L,
  D3D11_BIND_STREAM_OUTPUT    = 0x00000010L,
  D3D11_BIND_RENDER_TARGET    = 0x00000020L,
  D3D11_BIND_DEPTH_STENCIL    = 0x00000040L,
  D3D11_BIND_UNORDERED_ACCESS = 0x00000080L,
  D3D11_BIND_DECODER          = 0x00000200L,
  D3D11_BIND_VIDEO_ENCODER    = 0x00000400L,
}

alias D3D11_CPU_ACCESS_FLAG = int;
enum : D3D11_CPU_ACCESS_FLAG
{
  D3D11_CPU_ACCESS_WRITE = 0x00010000L,
  D3D11_CPU_ACCESS_READ  = 0x00020000L,
}

alias D3D11_RESOURCE_MISC_FLAG = int;
enum : D3D11_RESOURCE_MISC_FLAG
{
  D3D11_RESOURCE_MISC_GENERATE_MIPS                   = 0x00000001L,
  D3D11_RESOURCE_MISC_SHARED                          = 0x00000002L,
  D3D11_RESOURCE_MISC_TEXTURECUBE                     = 0x00000004L,
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS               = 0x00000010L,
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS          = 0x00000020L,
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED               = 0x00000040L,
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP                  = 0x00000080L,
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX               = 0x00000100L,
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE                  = 0x00000200L,
  D3D11_RESOURCE_MISC_SHARED_NTHANDLE                 = 0x00000800L,
  D3D11_RESOURCE_MISC_RESTRICTED_CONTENT              = 0x00001000L,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE        = 0x00002000L,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x00004000L,
  D3D11_RESOURCE_MISC_GUARDED                         = 0x00008000L,
  D3D11_RESOURCE_MISC_TILE_POOL                       = 0x00020000L,
  D3D11_RESOURCE_MISC_TILED                           = 0x00040000L,
  D3D11_RESOURCE_MISC_HW_PROTECTED                    = 0x00080000L,
}

alias D3D11_MAP = int;
enum : D3D11_MAP
{
  D3D11_MAP_READ               = 1,
  D3D11_MAP_WRITE              = 2,
  D3D11_MAP_READ_WRITE         = 3,
  D3D11_MAP_WRITE_DISCARD      = 4,
  D3D11_MAP_WRITE_NO_OVERWRITE = 5,
}

alias D3D11_MAP_FLAG = int;
enum : D3D11_MAP_FLAG
{
  D3D11_MAP_FLAG_DO_NOT_WAIT = 0x00100000L,
}

alias D3D11_RAISE_FLAG = int;
enum : D3D11_RAISE_FLAG
{
  D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L,
}

alias D3D11_CLEAR_FLAG = int;
enum : D3D11_CLEAR_FLAG
{
  D3D11_CLEAR_DEPTH   = 0x01L,
  D3D11_CLEAR_STENCIL = 0x02L,
}

alias D3D11_RECT = RECT;

struct D3D11_BOX
{
  UINT left;
  UINT top;
  UINT front;
  UINT right;
  UINT bottom;
  UINT back;
}

mixin DEFINE_GUID!(ID3D11DeviceChild, "1841e5c8-16b0-489b-bcc8-44cfb0d5deae");
// [uuid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")][object][local][pointer_default("unique")]
interface ID3D11DeviceChild : IUnknown
{
extern(Windows):

  void GetDevice(
    // [annotation("_Outptr_")]
    ID3D11Device* ppDevice,
  );

  HRESULT GetPrivateData(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_Inout_")]
    UINT* pDataSize,
    // [annotation("_Out_writes_bytes_opt_( *pDataSize )")]
    void* pData,
  );

  HRESULT SetPrivateData(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_reads_bytes_opt_( DataSize )")]
    in void* pData,
  );

  HRESULT SetPrivateDataInterface(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_opt_")]
    in IUnknown* pData,
  );

}

alias D3D11_COMPARISON_FUNC = int;
enum : D3D11_COMPARISON_FUNC
{
  D3D11_COMPARISON_NEVER         = 1,
  D3D11_COMPARISON_LESS          = 2,
  D3D11_COMPARISON_EQUAL         = 3,
  D3D11_COMPARISON_LESS_EQUAL    = 4,
  D3D11_COMPARISON_GREATER       = 5,
  D3D11_COMPARISON_NOT_EQUAL     = 6,
  D3D11_COMPARISON_GREATER_EQUAL = 7,
  D3D11_COMPARISON_ALWAYS        = 8,
}

alias D3D11_DEPTH_WRITE_MASK = int;
enum : D3D11_DEPTH_WRITE_MASK
{
  D3D11_DEPTH_WRITE_MASK_ZERO = 0,
  D3D11_DEPTH_WRITE_MASK_ALL  = 1,
}

alias D3D11_STENCIL_OP = int;
enum : D3D11_STENCIL_OP
{
  D3D11_STENCIL_OP_KEEP     = 1,
  D3D11_STENCIL_OP_ZERO     = 2,
  D3D11_STENCIL_OP_REPLACE  = 3,
  D3D11_STENCIL_OP_INCR_SAT = 4,
  D3D11_STENCIL_OP_DECR_SAT = 5,
  D3D11_STENCIL_OP_INVERT   = 6,
  D3D11_STENCIL_OP_INCR     = 7,
  D3D11_STENCIL_OP_DECR     = 8,
}

struct D3D11_DEPTH_STENCILOP_DESC
{
  D3D11_STENCIL_OP StencilFailOp;
  D3D11_STENCIL_OP StencilDepthFailOp;
  D3D11_STENCIL_OP StencilPassOp;
  D3D11_COMPARISON_FUNC StencilFunc;
}

struct D3D11_DEPTH_STENCIL_DESC
{
  BOOL DepthEnable;
  D3D11_DEPTH_WRITE_MASK DepthWriteMask;
  D3D11_COMPARISON_FUNC DepthFunc;
  BOOL StencilEnable;
  UINT8 StencilReadMask;
  UINT8 StencilWriteMask;
  D3D11_DEPTH_STENCILOP_DESC FrontFace;
  D3D11_DEPTH_STENCILOP_DESC BackFace;
}

mixin DEFINE_GUID!(ID3D11DepthStencilState, "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1");
// [uuid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")][object][local][pointer_default("unique")]
interface ID3D11DepthStencilState : ID3D11DeviceChild
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_DEPTH_STENCIL_DESC* pDesc,
  );

}

alias D3D11_BLEND = int;
enum : D3D11_BLEND
{
  D3D11_BLEND_ZERO             = 1,
  D3D11_BLEND_ONE              = 2,
  D3D11_BLEND_SRC_COLOR        = 3,
  D3D11_BLEND_INV_SRC_COLOR    = 4,
  D3D11_BLEND_SRC_ALPHA        = 5,
  D3D11_BLEND_INV_SRC_ALPHA    = 6,
  D3D11_BLEND_DEST_ALPHA       = 7,
  D3D11_BLEND_INV_DEST_ALPHA   = 8,
  D3D11_BLEND_DEST_COLOR       = 9,
  D3D11_BLEND_INV_DEST_COLOR   = 10,
  D3D11_BLEND_SRC_ALPHA_SAT    = 11,
  D3D11_BLEND_BLEND_FACTOR     = 14,
  D3D11_BLEND_INV_BLEND_FACTOR = 15,
  D3D11_BLEND_SRC1_COLOR       = 16,
  D3D11_BLEND_INV_SRC1_COLOR   = 17,
  D3D11_BLEND_SRC1_ALPHA       = 18,
  D3D11_BLEND_INV_SRC1_ALPHA   = 19,
}

alias D3D11_BLEND_OP = int;
enum : D3D11_BLEND_OP
{
  D3D11_BLEND_OP_ADD          = 1,
  D3D11_BLEND_OP_SUBTRACT     = 2,
  D3D11_BLEND_OP_REV_SUBTRACT = 3,
  D3D11_BLEND_OP_MIN          = 4,
  D3D11_BLEND_OP_MAX          = 5,
}

alias D3D11_COLOR_WRITE_ENABLE = int;
enum : D3D11_COLOR_WRITE_ENABLE
{
  D3D11_COLOR_WRITE_ENABLE_RED   = 1,
  D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
  D3D11_COLOR_WRITE_ENABLE_BLUE  = 4,
  D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
  D3D11_COLOR_WRITE_ENABLE_ALL   = (D3D11_COLOR_WRITE_ENABLE_RED|D3D11_COLOR_WRITE_ENABLE_GREEN|

        D3D11_COLOR_WRITE_ENABLE_BLUE|D3D11_COLOR_WRITE_ENABLE_ALPHA),
}

struct D3D11_RENDER_TARGET_BLEND_DESC
{
  BOOL BlendEnable;
  D3D11_BLEND SrcBlend;
  D3D11_BLEND DestBlend;
  D3D11_BLEND_OP BlendOp;
  D3D11_BLEND SrcBlendAlpha;
  D3D11_BLEND DestBlendAlpha;
  D3D11_BLEND_OP BlendOpAlpha;
  UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC
{
  BOOL AlphaToCoverageEnable;
  BOOL IndependentBlendEnable;
  D3D11_RENDER_TARGET_BLEND_DESC[D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT] RenderTarget;
}

mixin DEFINE_GUID!(ID3D11BlendState, "75b68faa-347d-4159-8f45-a0640f01cd9a");
// [uuid("75b68faa-347d-4159-8f45-a0640f01cd9a")][object][local][pointer_default("unique")]
interface ID3D11BlendState : ID3D11DeviceChild
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_BLEND_DESC* pDesc,
  );

}

struct D3D11_RASTERIZER_DESC
{
  D3D11_FILL_MODE FillMode;
  D3D11_CULL_MODE CullMode;
  BOOL FrontCounterClockwise;
  INT DepthBias;
  FLOAT DepthBiasClamp;
  FLOAT SlopeScaledDepthBias;
  BOOL DepthClipEnable;
  BOOL ScissorEnable;
  BOOL MultisampleEnable;
  BOOL AntialiasedLineEnable;
}

mixin DEFINE_GUID!(ID3D11RasterizerState, "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7");
// [uuid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")][object][local][pointer_default("unique")]
interface ID3D11RasterizerState : ID3D11DeviceChild
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_RASTERIZER_DESC* pDesc,
  );

}

UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels)
{
  return MipSlice + ArraySlice * MipLevels;
}

struct D3D11_SUBRESOURCE_DATA
{
  const void* pSysMem;
  UINT SysMemPitch;
  UINT SysMemSlicePitch;
}

struct D3D11_MAPPED_SUBRESOURCE
{
  void* pData;
  UINT RowPitch;
  UINT DepthPitch;
}

mixin DEFINE_GUID!(ID3D11Resource, "dc8e63f3-d12b-4952-b47b-5e45026a862d");
// [uuid("dc8e63f3-d12b-4952-b47b-5e45026a862d")][object][local][pointer_default("unique")]
interface ID3D11Resource : ID3D11DeviceChild
{
extern(Windows):

  void GetType(
    // [annotation("_Out_")]
    D3D11_RESOURCE_DIMENSION* pResourceDimension,
  );

  void SetEvictionPriority(
    // [annotation("_In_")]
    UINT EvictionPriority,
  );

  UINT GetEvictionPriority(  );

}

struct D3D11_BUFFER_DESC
{
  UINT ByteWidth;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
  UINT StructureByteStride;
}

mixin DEFINE_GUID!(ID3D11Buffer, "48570b85-d1ee-4fcd-a250-eb350722b037");
// [uuid("48570b85-d1ee-4fcd-a250-eb350722b037")][object][local][pointer_default("unique")]
interface ID3D11Buffer : ID3D11Resource
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_BUFFER_DESC* pDesc,
  );

}

struct D3D11_TEXTURE1D_DESC
{
  UINT Width;
  UINT MipLevels;
  UINT ArraySize;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

mixin DEFINE_GUID!(ID3D11Texture1D, "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c");
// [uuid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")][object][local][pointer_default("unique")]
interface ID3D11Texture1D : ID3D11Resource
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_TEXTURE1D_DESC* pDesc,
  );

}

struct D3D11_TEXTURE2D_DESC
{
  UINT Width;
  UINT Height;
  UINT MipLevels;
  UINT ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

mixin DEFINE_GUID!(ID3D11Texture2D, "6f15aaf2-d208-4e89-9ab4-489535d34f9c");
// [uuid("6f15aaf2-d208-4e89-9ab4-489535d34f9c")][object][local][pointer_default("unique")]
interface ID3D11Texture2D : ID3D11Resource
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_TEXTURE2D_DESC* pDesc,
  );

}

struct D3D11_TEXTURE3D_DESC
{
  UINT Width;
  UINT Height;
  UINT Depth;
  UINT MipLevels;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

mixin DEFINE_GUID!(ID3D11Texture3D, "037e866e-f56d-4357-a8af-9dabbe6e250e");
// [uuid("037e866e-f56d-4357-a8af-9dabbe6e250e")][object][local][pointer_default("unique")]
interface ID3D11Texture3D : ID3D11Resource
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_TEXTURE3D_DESC* pDesc,
  );

}

alias D3D11_TEXTURECUBE_FACE = int;
enum : D3D11_TEXTURECUBE_FACE
{
  D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5,
}

mixin DEFINE_GUID!(ID3D11View, "839d1216-bb2e-412b-b7f4-a9dbebe08ed1");
// [uuid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")][object][local][pointer_default("unique")]
interface ID3D11View : ID3D11DeviceChild
{
extern(Windows):

  void GetResource(
    // [annotation("_Outptr_")]
    ID3D11Resource* ppResource,
  );

}

struct D3D11_BUFFER_SRV
{

  union
  {
    UINT FirstElement;
    UINT ElementOffset;
  }

  union
  {
    UINT NumElements;
    UINT ElementWidth;
  }
}

alias D3D11_BUFFEREX_SRV_FLAG = int;
enum : D3D11_BUFFEREX_SRV_FLAG
{
  D3D11_BUFFEREX_SRV_FLAG_RAW = 0x00000001,
}

struct D3D11_BUFFEREX_SRV
{
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
}

struct D3D11_TEX1D_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEX1D_ARRAY_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEX2D_ARRAY_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEXCUBE_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEXCUBE_ARRAY_SRV
{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT First2DArrayFace;
  UINT NumCubes;
}

struct D3D11_TEX2DMS_SRV
{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_SRV
{
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_SRV_DIMENSION ViewDimension;

  union
  {
    D3D11_BUFFER_SRV Buffer;
    D3D11_TEX1D_SRV Texture1D;
    D3D11_TEX1D_ARRAY_SRV Texture1DArray;
    D3D11_TEX2D_SRV Texture2D;
    D3D11_TEX2D_ARRAY_SRV Texture2DArray;
    D3D11_TEX2DMS_SRV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    D3D11_TEX3D_SRV Texture3D;
    D3D11_TEXCUBE_SRV TextureCube;
    D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
    D3D11_BUFFEREX_SRV BufferEx;
  }
}

mixin DEFINE_GUID!(ID3D11ShaderResourceView, "b0e06fe0-8192-4e1a-b1ca-36d7414710b2");
// [uuid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")][object][local][pointer_default("unique")]
interface ID3D11ShaderResourceView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,
  );

}

struct D3D11_BUFFER_RTV
{

  union
  {
    UINT FirstElement;
    UINT ElementOffset;
  }

  union
  {
    UINT NumElements;
    UINT ElementWidth;
  }
}

struct D3D11_TEX1D_RTV
{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_RTV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_RTV
{
  UINT MipSlice;
}

struct D3D11_TEX2DMS_RTV
{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2D_ARRAY_RTV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV
{
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_RTV
{
  UINT MipSlice;
  UINT FirstWSlice;
  UINT WSize;
}

struct D3D11_RENDER_TARGET_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_RTV_DIMENSION ViewDimension;

  union
  {
    D3D11_BUFFER_RTV Buffer;
    D3D11_TEX1D_RTV Texture1D;
    D3D11_TEX1D_ARRAY_RTV Texture1DArray;
    D3D11_TEX2D_RTV Texture2D;
    D3D11_TEX2D_ARRAY_RTV Texture2DArray;
    D3D11_TEX2DMS_RTV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    D3D11_TEX3D_RTV Texture3D;
  }
}

mixin DEFINE_GUID!(ID3D11RenderTargetView, "dfdba067-0b8d-4865-875b-d7b4516cc164");
// [uuid("dfdba067-0b8d-4865-875b-d7b4516cc164")][object][local][pointer_default("unique")]
interface ID3D11RenderTargetView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_RENDER_TARGET_VIEW_DESC* pDesc,
  );

}

struct D3D11_TEX1D_DSV
{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_DSV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_DSV
{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2DMS_DSV
{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_DSV
{
  UINT FirstArraySlice;
  UINT ArraySize;
}

alias D3D11_DSV_FLAG = int;
enum : D3D11_DSV_FLAG
{
  D3D11_DSV_READ_ONLY_DEPTH   = 0x1L,
  D3D11_DSV_READ_ONLY_STENCIL = 0x2L,
}

struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_DSV_DIMENSION ViewDimension;
  UINT Flags;

  union
  {
    D3D11_TEX1D_DSV Texture1D;
    D3D11_TEX1D_ARRAY_DSV Texture1DArray;
    D3D11_TEX2D_DSV Texture2D;
    D3D11_TEX2D_ARRAY_DSV Texture2DArray;
    D3D11_TEX2DMS_DSV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
  }
}

mixin DEFINE_GUID!(ID3D11DepthStencilView, "9fdac92a-1876-48c3-afad-25b94f84a9b6");
// [uuid("9fdac92a-1876-48c3-afad-25b94f84a9b6")][object][local][pointer_default("unique")]
interface ID3D11DepthStencilView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc,
  );

}

alias D3D11_BUFFER_UAV_FLAG = int;
enum : D3D11_BUFFER_UAV_FLAG
{
  D3D11_BUFFER_UAV_FLAG_RAW     = 0x00000001,
  D3D11_BUFFER_UAV_FLAG_APPEND  = 0x00000002,
  D3D11_BUFFER_UAV_FLAG_COUNTER = 0x00000004,
}

struct D3D11_BUFFER_UAV
{
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
}

struct D3D11_TEX1D_UAV
{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_UAV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_UAV
{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_UAV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_UAV
{
  UINT MipSlice;
  UINT FirstWSlice;
  UINT WSize;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_UAV_DIMENSION ViewDimension;

  union
  {
    D3D11_BUFFER_UAV Buffer;
    D3D11_TEX1D_UAV Texture1D;
    D3D11_TEX1D_ARRAY_UAV Texture1DArray;
    D3D11_TEX2D_UAV Texture2D;
    D3D11_TEX2D_ARRAY_UAV Texture2DArray;
    D3D11_TEX3D_UAV Texture3D;
  }
}

mixin DEFINE_GUID!(ID3D11UnorderedAccessView, "28acf509-7f5c-48f6-8611-f316010a6380");
// [uuid("28acf509-7f5c-48f6-8611-f316010a6380")][object][local][pointer_default("unique")]
interface ID3D11UnorderedAccessView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc,
  );

}

mixin DEFINE_GUID!(ID3D11VertexShader, "3b301d64-d678-4289-8897-22f8928b72f3");
// [uuid("3b301d64-d678-4289-8897-22f8928b72f3")][object][local][pointer_default("unique")]
interface ID3D11VertexShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11HullShader, "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd");
// [uuid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")][object][local][pointer_default("unique")]
interface ID3D11HullShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11DomainShader, "f582c508-0f36-490c-9977-31eece268cfa");
// [uuid("f582c508-0f36-490c-9977-31eece268cfa")][object][local][pointer_default("unique")]
interface ID3D11DomainShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11GeometryShader, "38325b96-effb-4022-ba02-2e795b70275c");
// [uuid("38325b96-effb-4022-ba02-2e795b70275c")][object][local][pointer_default("unique")]
interface ID3D11GeometryShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11PixelShader, "ea82e40d-51dc-4f33-93d4-db7c9125ae8c");
// [uuid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")][object][local][pointer_default("unique")]
interface ID3D11PixelShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11ComputeShader, "4f5b196e-c2bd-495e-bd01-1fded38e4969");
// [uuid("4f5b196e-c2bd-495e-bd01-1fded38e4969")][object][local][pointer_default("unique")]
interface ID3D11ComputeShader : ID3D11DeviceChild
{
extern(Windows):

}

mixin DEFINE_GUID!(ID3D11InputLayout, "e4819ddc-4cf0-4025-bd26-5de82a3e07b7");
// [uuid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")][object][local][pointer_default("unique")]
interface ID3D11InputLayout : ID3D11DeviceChild
{
extern(Windows):

}

alias D3D11_FILTER = int;
enum : D3D11_FILTER
{
  D3D11_FILTER_MIN_MAG_MIP_POINT                          = 0x00000000,
  D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR                   = 0x00000001,
  D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT             = 0x00000004,
  D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR                   = 0x00000005,
  D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT                   = 0x00000010,
  D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR            = 0x00000011,
  D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT                   = 0x00000014,
  D3D11_FILTER_MIN_MAG_MIP_LINEAR                         = 0x00000015,
  D3D11_FILTER_ANISOTROPIC                                = 0x00000055,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT               = 0x00000080,
  D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR        = 0x00000081,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  = 0x00000084,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR        = 0x00000085,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT        = 0x00000090,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000091,
  D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT        = 0x00000094,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR              = 0x00000095,
  D3D11_FILTER_COMPARISON_ANISOTROPIC                     = 0x000000d5,
  D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT                  = 0x00000100,
  D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR           = 0x00000101,
  D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     = 0x00000104,
  D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR           = 0x00000105,
  D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT           = 0x00000110,
  D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    = 0x00000111,
  D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT           = 0x00000114,
  D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                 = 0x00000115,
  D3D11_FILTER_MINIMUM_ANISOTROPIC                        = 0x00000155,
  D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                  = 0x00000180,
  D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           = 0x00000181,
  D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     = 0x00000184,
  D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           = 0x00000185,
  D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           = 0x00000190,
  D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    = 0x00000191,
  D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           = 0x00000194,
  D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                 = 0x00000195,
  D3D11_FILTER_MAXIMUM_ANISOTROPIC                        = 0x000001d5,
}

alias D3D11_FILTER_TYPE = int;
enum : D3D11_FILTER_TYPE
{
  D3D11_FILTER_TYPE_POINT  = 0,
  D3D11_FILTER_TYPE_LINEAR = 1,
}

alias D3D11_FILTER_REDUCTION_TYPE = int;
enum : D3D11_FILTER_REDUCTION_TYPE
{
  D3D11_FILTER_REDUCTION_TYPE_STANDARD   = 0,
  D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1,
  D3D11_FILTER_REDUCTION_TYPE_MINIMUM    = 2,
  D3D11_FILTER_REDUCTION_TYPE_MAXIMUM    = 3,
}

enum UINT D3D11_FILTER_REDUCTION_TYPE_MASK = 0x00000003;

enum UINT D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7;

enum UINT D3D11_FILTER_TYPE_MASK = 0x00000003;

enum UINT D3D11_MIN_FILTER_SHIFT = 4;

enum UINT D3D11_MAG_FILTER_SHIFT = 2;

enum UINT D3D11_MIP_FILTER_SHIFT = 0;

enum UINT D3D11_COMPARISON_FILTERING_BIT = 0x00000080;

enum UINT D3D11_ANISOTROPIC_FILTERING_BIT = 0x00000040;

alias D3D11_ENCODE_BASIC_FILTER = (min, mag, mip, reduction) => cast(D3D11_FILTER)
(
  ( ( min       & D3D11_FILTER_TYPE_MASK )           << D3D11_MIN_FILTER_SHIFT ) |
  ( ( mag       & D3D11_FILTER_TYPE_MASK )           << D3D11_MAG_FILTER_SHIFT ) |
  ( ( mip       & D3D11_FILTER_TYPE_MASK )           << D3D11_MIP_FILTER_SHIFT ) |
  ( ( reduction & D3D11_FILTER_REDUCTION_TYPE_MASK ) << D3D11_FILTER_REDUCTION_TYPE_SHIFT )
);

alias D3D11_ENCODE_ANISOTROPIC_FILTER = (reduction) => cast(D3D11_FILTER)
(
  D3D11_ANISOTROPIC_FILTERING_BIT | D3D11_ENCODE_BASIC_FILTER(D3D11_FILTER_TYPE_LINEAR,
                                                              D3D11_FILTER_TYPE_LINEAR,
                                                              D3D11_FILTER_TYPE_LINEAR,
                                                              reduction)
);

alias D3D11_DECODE_MIN_FILTER = (d3d11Filter) => cast(D3D11_FILTER_TYPE)( ( d3d11Filter >> D3D11_MIN_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK );
alias D3D11_DECODE_MAG_FILTER = (d3d11Filter) => cast(D3D11_FILTER_TYPE)( ( d3d11Filter >> D3D11_MAG_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK );
alias D3D11_DECODE_MIP_FILTER = (d3d11Filter) => cast(D3D11_FILTER_TYPE)( ( d3d11Filter >> D3D11_MIP_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK );

alias D3D11_DECODE_FILTER_REDUCTION = (d3d11Filter) => cast(D3D11_FILTER_REDUCTION_TYPE)( ( d3d11Filter >> D3D11_FILTER_REDUCTION_TYPE_SHIFT ) & D3D11_FILTER_REDUCTION_TYPE_MASK );

alias D3D11_DECODE_IS_COMPARISON_FILTER = (d3d11Filter) => D3D11_DECODE_FILTER_REDUCTION(d3d11Filter) == D3D11_FILTER_REDUCTION_TYPE_COMPARISON;

alias D3D11_DECODE_IS_ANISOTROPIC_FILTER = (d3d11Filter) =>
  ( d3d11Filter & D3D11_ANISOTROPIC_FILTERING_BIT ) &&
  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIN_FILTER(d3d11Filter) ) &&
  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MAG_FILTER(d3d11Filter) ) &&
  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIP_FILTER(d3d11Filter) );

alias D3D11_TEXTURE_ADDRESS_MODE = int;
enum : D3D11_TEXTURE_ADDRESS_MODE
{
  D3D11_TEXTURE_ADDRESS_WRAP        = 1,
  D3D11_TEXTURE_ADDRESS_MIRROR      = 2,
  D3D11_TEXTURE_ADDRESS_CLAMP       = 3,
  D3D11_TEXTURE_ADDRESS_BORDER      = 4,
  D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5,
}

struct D3D11_SAMPLER_DESC
{
  D3D11_FILTER Filter;
  D3D11_TEXTURE_ADDRESS_MODE AddressU;
  D3D11_TEXTURE_ADDRESS_MODE AddressV;
  D3D11_TEXTURE_ADDRESS_MODE AddressW;
  FLOAT MipLODBias;
  UINT MaxAnisotropy;
  D3D11_COMPARISON_FUNC ComparisonFunc;
  FLOAT[4] BorderColor;
  FLOAT MinLOD;
  FLOAT MaxLOD;
}

mixin DEFINE_GUID!(ID3D11SamplerState, "da6fea51-564c-4487-9810-f0d0f9b4e3a5");
// [uuid("da6fea51-564c-4487-9810-f0d0f9b4e3a5")][object][local][pointer_default("unique")]
interface ID3D11SamplerState : ID3D11DeviceChild
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_SAMPLER_DESC* pDesc,
  );

}

alias D3D11_FORMAT_SUPPORT = int;
enum : D3D11_FORMAT_SUPPORT
{
  D3D11_FORMAT_SUPPORT_BUFFER                      = 0x00000001,
  D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER            = 0x00000002,
  D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER             = 0x00000004,
  D3D11_FORMAT_SUPPORT_SO_BUFFER                   = 0x00000008,
  D3D11_FORMAT_SUPPORT_TEXTURE1D                   = 0x00000010,
  D3D11_FORMAT_SUPPORT_TEXTURE2D                   = 0x00000020,
  D3D11_FORMAT_SUPPORT_TEXTURE3D                   = 0x00000040,
  D3D11_FORMAT_SUPPORT_TEXTURECUBE                 = 0x00000080,
  D3D11_FORMAT_SUPPORT_SHADER_LOAD                 = 0x00000100,
  D3D11_FORMAT_SUPPORT_SHADER_SAMPLE               = 0x00000200,
  D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON    = 0x00000400,
  D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT     = 0x00000800,
  D3D11_FORMAT_SUPPORT_MIP                         = 0x00001000,
  D3D11_FORMAT_SUPPORT_MIP_AUTOGEN                 = 0x00002000,
  D3D11_FORMAT_SUPPORT_RENDER_TARGET               = 0x00004000,
  D3D11_FORMAT_SUPPORT_BLENDABLE                   = 0x00008000,
  D3D11_FORMAT_SUPPORT_DEPTH_STENCIL               = 0x00010000,
  D3D11_FORMAT_SUPPORT_CPU_LOCKABLE                = 0x00020000,
  D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE         = 0x00040000,
  D3D11_FORMAT_SUPPORT_DISPLAY                     = 0x00080000,
  D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT      = 0x00100000,
  D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET    = 0x00200000,
  D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD            = 0x00400000,
  D3D11_FORMAT_SUPPORT_SHADER_GATHER               = 0x00800000,
  D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST            = 0x01000000,
  D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x02000000,
  D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON    = 0x04000000,
  D3D11_FORMAT_SUPPORT_DECODER_OUTPUT              = 0x08000000,
  D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT      = 0x10000000,
  D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT       = 0x20000000,
  D3D11_FORMAT_SUPPORT_VIDEO_ENCODER               = 0x40000000,
}

alias D3D11_FORMAT_SUPPORT2 = int;
enum : D3D11_FORMAT_SUPPORT2
{
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                               = 0x00000001,
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                       = 0x00000002,
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x00000004,
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                          = 0x00000008,
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                 = 0x00000010,
  D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               = 0x00000020,
  D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD                               = 0x00000040,
  D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE                              = 0x00000080,
  D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                       = 0x00000100,
  D3D11_FORMAT_SUPPORT2_TILED                                        = 0x00000200,
  D3D11_FORMAT_SUPPORT2_SHAREABLE                                    = 0x00000400,
  D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                           = 0x00004000,
}

mixin DEFINE_GUID!(ID3D11Asynchronous, "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b");
// [uuid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")][object][local][pointer_default("unique")]
interface ID3D11Asynchronous : ID3D11DeviceChild
{
extern(Windows):

  UINT GetDataSize(  );

}

alias D3D11_ASYNC_GETDATA_FLAG = int;
enum : D3D11_ASYNC_GETDATA_FLAG
{
  D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1,
}

alias D3D11_QUERY = int;
enum : D3D11_QUERY
{
  D3D11_QUERY_EVENT                         = 0,
  D3D11_QUERY_OCCLUSION,
  D3D11_QUERY_TIMESTAMP,
  D3D11_QUERY_TIMESTAMP_DISJOINT,
  D3D11_QUERY_PIPELINE_STATISTICS,
  D3D11_QUERY_OCCLUSION_PREDICATE,
  D3D11_QUERY_SO_STATISTICS,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE,
  D3D11_QUERY_SO_STATISTICS_STREAM0,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0,
  D3D11_QUERY_SO_STATISTICS_STREAM1,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1,
  D3D11_QUERY_SO_STATISTICS_STREAM2,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2,
  D3D11_QUERY_SO_STATISTICS_STREAM3,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3,
}

alias D3D11_QUERY_MISC_FLAG = int;
enum : D3D11_QUERY_MISC_FLAG
{
  D3D11_QUERY_MISC_PREDICATEHINT = 0x1,
}

struct D3D11_QUERY_DESC
{
  D3D11_QUERY Query;
  UINT MiscFlags;
}

mixin DEFINE_GUID!(ID3D11Query, "d6c00747-87b7-425e-b84d-44d108560afd");
// [uuid("d6c00747-87b7-425e-b84d-44d108560afd")][object][local][pointer_default("unique")]
interface ID3D11Query : ID3D11Asynchronous
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_QUERY_DESC* pDesc,
  );

}

mixin DEFINE_GUID!(ID3D11Predicate, "9eb576dd-9f77-4d86-81aa-8bab5fe490e2");
// [uuid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")][object][local][pointer_default("unique")]
interface ID3D11Predicate : ID3D11Query
{
extern(Windows):

}

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
  UINT64 Frequency;
  BOOL Disjoint;
}

struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
{
  UINT64 IAVertices;
  UINT64 IAPrimitives;
  UINT64 VSInvocations;
  UINT64 GSInvocations;
  UINT64 GSPrimitives;
  UINT64 CInvocations;
  UINT64 CPrimitives;
  UINT64 PSInvocations;
  UINT64 HSInvocations;
  UINT64 DSInvocations;
  UINT64 CSInvocations;
}

struct D3D11_QUERY_DATA_SO_STATISTICS
{
  UINT64 NumPrimitivesWritten;
  UINT64 PrimitivesStorageNeeded;
}

alias D3D11_COUNTER = int;
enum : D3D11_COUNTER
{
  D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
}

alias D3D11_COUNTER_TYPE = int;
enum : D3D11_COUNTER_TYPE
{
  D3D11_COUNTER_TYPE_FLOAT32,
  D3D11_COUNTER_TYPE_UINT16,
  D3D11_COUNTER_TYPE_UINT32,
  D3D11_COUNTER_TYPE_UINT64,
}

struct D3D11_COUNTER_DESC
{
  D3D11_COUNTER Counter;
  UINT MiscFlags;
}

struct D3D11_COUNTER_INFO
{
  D3D11_COUNTER LastDeviceDependentCounter;
  UINT NumSimultaneousCounters;
  UINT8 NumDetectableParallelUnits;
}

mixin DEFINE_GUID!(ID3D11Counter, "6e8c49fb-a371-4770-b440-29086022b741");
// [uuid("6e8c49fb-a371-4770-b440-29086022b741")][object][local][pointer_default("unique")]
interface ID3D11Counter : ID3D11Asynchronous
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_COUNTER_DESC* pDesc,
  );

}

alias D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = int;
enum : D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
{
  D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
  D3D11_CENTER_MULTISAMPLE_PATTERN   = 0xfffffffe,
}

alias D3D11_DEVICE_CONTEXT_TYPE = int;
enum : D3D11_DEVICE_CONTEXT_TYPE
{
  D3D11_DEVICE_CONTEXT_IMMEDIATE,
  D3D11_DEVICE_CONTEXT_DEFERRED,
}

struct D3D11_CLASS_INSTANCE_DESC
{
  UINT InstanceId;
  UINT InstanceIndex;
  UINT TypeId;
  UINT ConstantBuffer;
  UINT BaseConstantBufferOffset;
  UINT BaseTexture;
  UINT BaseSampler;
  BOOL Created;
}

mixin DEFINE_GUID!(ID3D11ClassInstance, "a6cd7faa-b0b7-4a2f-9436-8662a65797cb");
// [uuid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")][object][local][pointer_default("unique")]
interface ID3D11ClassInstance : ID3D11DeviceChild
{
extern(Windows):

  void GetClassLinkage(
    // [annotation("_Outptr_")]
    ID3D11ClassLinkage* ppLinkage,
  );

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_CLASS_INSTANCE_DESC* pDesc,
  );

  void GetInstanceName(
    // [annotation("_Out_writes_opt_(*pBufferLength)")]
    LPSTR pInstanceName,
    // [annotation("_Inout_")]
    SIZE_T* pBufferLength,
  );

  void GetTypeName(
    // [annotation("_Out_writes_opt_(*pBufferLength)")]
    LPSTR pTypeName,
    // [annotation("_Inout_")]
    SIZE_T* pBufferLength,
  );

}

mixin DEFINE_GUID!(ID3D11ClassLinkage, "ddf57cba-9543-46e4-a12b-f207a0fe7fed");
// [uuid("ddf57cba-9543-46e4-a12b-f207a0fe7fed")][object][local][pointer_default("unique")]
interface ID3D11ClassLinkage : ID3D11DeviceChild
{
extern(Windows):

  HRESULT GetClassInstance(
    // [annotation("_In_")]
    LPCSTR pClassInstanceName,
    // [annotation("_In_")]
    UINT InstanceIndex,
    // [annotation("_COM_Outptr_")]
    ID3D11ClassInstance* ppInstance,
  );

  HRESULT CreateClassInstance(
    // [annotation("_In_")]
    LPCSTR pClassTypeName,
    // [annotation("_In_")]
    UINT ConstantBufferOffset,
    // [annotation("_In_")]
    UINT ConstantVectorOffset,
    // [annotation("_In_")]
    UINT TextureOffset,
    // [annotation("_In_")]
    UINT SamplerOffset,
    // [annotation("_COM_Outptr_")]
    ID3D11ClassInstance* ppInstance,
  );

}

mixin DEFINE_GUID!(ID3D11CommandList, "a24bc4d1-769e-43f7-8013-98ff566c18e2");
// [uuid("a24bc4d1-769e-43f7-8013-98ff566c18e2")][object][local][pointer_default("unique")]
interface ID3D11CommandList : ID3D11DeviceChild
{
extern(Windows):

  UINT GetContextFlags(  );

}

alias D3D11_FEATURE = int;
enum : D3D11_FEATURE
{
  D3D11_FEATURE_THREADING,
  D3D11_FEATURE_DOUBLES,
  D3D11_FEATURE_FORMAT_SUPPORT,
  D3D11_FEATURE_FORMAT_SUPPORT2,
  D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS,
  D3D11_FEATURE_D3D11_OPTIONS,
  D3D11_FEATURE_ARCHITECTURE_INFO,
  D3D11_FEATURE_D3D9_OPTIONS,
  D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT,
  D3D11_FEATURE_D3D9_SHADOW_SUPPORT,
  D3D11_FEATURE_D3D11_OPTIONS1,
  D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT,
  D3D11_FEATURE_MARKER_SUPPORT,
  D3D11_FEATURE_D3D9_OPTIONS1,
  D3D11_FEATURE_D3D11_OPTIONS2,
  D3D11_FEATURE_D3D11_OPTIONS3,
  D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT,
}

struct D3D11_FEATURE_DATA_THREADING
{
  BOOL DriverConcurrentCreates;
  BOOL DriverCommandLists;
}

struct D3D11_FEATURE_DATA_DOUBLES
{
  BOOL DoublePrecisionFloatShaderOps;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
{
  DXGI_FORMAT InFormat;
  UINT OutFormatSupport;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
{
  DXGI_FORMAT InFormat;
  UINT OutFormatSupport2;
}

struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
{
  BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS
{
  BOOL OutputMergerLogicOp;
  BOOL UAVOnlyRenderingForcedSampleCount;
  BOOL DiscardAPIsSeenByDriver;
  BOOL FlagsForUpdateAndCopySeenByDriver;
  BOOL ClearView;
  BOOL CopyWithOverlap;
  BOOL ConstantBufferPartialUpdate;
  BOOL ConstantBufferOffsetting;
  BOOL MapNoOverwriteOnDynamicConstantBuffer;
  BOOL MapNoOverwriteOnDynamicBufferSRV;
  BOOL MultisampleRTVWithForcedSampleCountOne;
  BOOL SAD4ShaderInstructions;
  BOOL ExtendedDoublesShaderInstructions;
  BOOL ExtendedResourceSharing;
}

struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
{
  BOOL TileBasedDeferredRenderer;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS
{
  BOOL FullNonPow2TextureSupport;
}

struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
{
  BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

alias D3D11_SHADER_MIN_PRECISION_SUPPORT = int;
enum : D3D11_SHADER_MIN_PRECISION_SUPPORT
{
  D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
  D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2,
}

struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
{
  UINT PixelShaderMinPrecision;
  UINT AllOtherShaderStagesMinPrecision;
}

alias D3D11_TILED_RESOURCES_TIER = int;
enum : D3D11_TILED_RESOURCES_TIER
{
  D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
  D3D11_TILED_RESOURCES_TIER_1        = 1,
  D3D11_TILED_RESOURCES_TIER_2        = 2,
  D3D11_TILED_RESOURCES_TIER_3        = 3,
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
{
  D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
  BOOL MinMaxFiltering;
  BOOL ClearViewAlsoSupportsDepthOnlyFormats;
  BOOL MapOnDefaultBuffers;
}

struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
{
  BOOL SimpleInstancingSupported;
}

struct D3D11_FEATURE_DATA_MARKER_SUPPORT
{
  BOOL Profile;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
{
  BOOL FullNonPow2TextureSupported;
  BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
  BOOL SimpleInstancingSupported;
  BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}

alias D3D11_CONSERVATIVE_RASTERIZATION_TIER = int;
enum : D3D11_CONSERVATIVE_RASTERIZATION_TIER
{
  D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
  D3D11_CONSERVATIVE_RASTERIZATION_TIER_1        = 1,
  D3D11_CONSERVATIVE_RASTERIZATION_TIER_2        = 2,
  D3D11_CONSERVATIVE_RASTERIZATION_TIER_3        = 3,
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
{
  BOOL PSSpecifiedStencilRefSupported;
  BOOL TypedUAVLoadAdditionalFormats;
  BOOL ROVsSupported;
  D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
  D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
  BOOL MapOnDefaultTextures;
  BOOL StandardSwizzle;
  BOOL UnifiedMemoryArchitecture;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
{
  BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}

struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
  UINT MaxGPUVirtualAddressBitsPerResource;
  UINT MaxGPUVirtualAddressBitsPerProcess;
}

mixin DEFINE_GUID!(ID3D11DeviceContext, "c0bfa96c-e089-44fb-8eaf-26f8796190da");
// [uuid("c0bfa96c-e089-44fb-8eaf-26f8796190da")][object][local][pointer_default("unique")]
interface ID3D11DeviceContext : ID3D11DeviceChild
{
extern(Windows):

  void VSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void PSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void PSSetShader(
    // [annotation("_In_opt_")]
    ID3D11PixelShader pPixelShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void PSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void VSSetShader(
    // [annotation("_In_opt_")]
    ID3D11VertexShader pVertexShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void DrawIndexed(
    // [annotation("_In_")]
    UINT IndexCount,
    // [annotation("_In_")]
    UINT StartIndexLocation,
    // [annotation("_In_")]
    INT BaseVertexLocation,
  );

  void Draw(
    // [annotation("_In_")]
    UINT VertexCount,
    // [annotation("_In_")]
    UINT StartVertexLocation,
  );

  HRESULT Map(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_")]
    UINT Subresource,
    // [annotation("_In_")]
    D3D11_MAP MapType,
    // [annotation("_In_")]
    UINT MapFlags,
    // [annotation("_Out_opt_")]
    D3D11_MAPPED_SUBRESOURCE* pMappedResource,
  );

  void Unmap(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_")]
    UINT Subresource,
  );

  void PSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void IASetInputLayout(
    // [annotation("_In_opt_")]
    ID3D11InputLayout pInputLayout,
  );

  void IASetVertexBuffers(
    // [annotation("_In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppVertexBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    in UINT* pStrides,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    in UINT* pOffsets,
  );

  void IASetIndexBuffer(
    // [annotation("_In_opt_")]
    ID3D11Buffer pIndexBuffer,
    // [annotation("_In_")]
    DXGI_FORMAT Format,
    // [annotation("_In_")]
    UINT Offset,
  );

  void DrawIndexedInstanced(
    // [annotation("_In_")]
    UINT IndexCountPerInstance,
    // [annotation("_In_")]
    UINT InstanceCount,
    // [annotation("_In_")]
    UINT StartIndexLocation,
    // [annotation("_In_")]
    INT BaseVertexLocation,
    // [annotation("_In_")]
    UINT StartInstanceLocation,
  );

  void DrawInstanced(
    // [annotation("_In_")]
    UINT VertexCountPerInstance,
    // [annotation("_In_")]
    UINT InstanceCount,
    // [annotation("_In_")]
    UINT StartVertexLocation,
    // [annotation("_In_")]
    UINT StartInstanceLocation,
  );

  void GSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void GSSetShader(
    // [annotation("_In_opt_")]
    ID3D11GeometryShader pShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void IASetPrimitiveTopology(
    // [annotation("_In_")]
    D3D11_PRIMITIVE_TOPOLOGY Topology,
  );

  void VSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void VSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void Begin(
    // [annotation("_In_")]
    ID3D11Asynchronous pAsync,
  );

  void End(
    // [annotation("_In_")]
    ID3D11Asynchronous pAsync,
  );

  HRESULT GetData(
    // [annotation("_In_")]
    ID3D11Asynchronous pAsync,
    // [annotation("_Out_writes_bytes_opt_( DataSize )")]
    void* pData,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_")]
    UINT GetDataFlags,
  );

  void SetPredication(
    // [annotation("_In_opt_")]
    ID3D11Predicate pPredicate,
    // [annotation("_In_")]
    BOOL PredicateValue,
  );

  void GSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void GSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void OMSetRenderTargets(
    // [annotation("_In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11RenderTargetView* ppRenderTargetViews,
    // [annotation("_In_opt_")]
    ID3D11DepthStencilView pDepthStencilView,
  );

  void OMSetRenderTargetsAndUnorderedAccessViews(
    // [annotation("_In_")]
    UINT NumRTVs,
    // [annotation("_In_reads_opt_(NumRTVs)")]
    ID3D11RenderTargetView* ppRenderTargetViews,
    // [annotation("_In_opt_")]
    ID3D11DepthStencilView pDepthStencilView,
    // [annotation("_In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )")]
    UINT UAVStartSlot,
    // [annotation("_In_")]
    UINT NumUAVs,
    // [annotation("_In_reads_opt_(NumUAVs)")]
    ID3D11UnorderedAccessView* ppUnorderedAccessViews,
    // [annotation("_In_reads_opt_(NumUAVs)")]
    in UINT* pUAVInitialCounts,
  );

  void OMSetBlendState(
    // [annotation("_In_opt_")]
    ID3D11BlendState pBlendState,
    // [annotation("_In_opt_")]
    in FLOAT[4] BlendFactor,
    // [annotation("_In_")]
    UINT SampleMask,
  );

  void OMSetDepthStencilState(
    // [annotation("_In_opt_")]
    ID3D11DepthStencilState pDepthStencilState,
    // [annotation("_In_")]
    UINT StencilRef,
  );

  void SOSetTargets(
    // [annotation("_In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppSOTargets,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    in UINT* pOffsets,
  );

  void DrawAuto(  );

  void DrawIndexedInstancedIndirect(
    // [annotation("_In_")]
    ID3D11Buffer pBufferForArgs,
    // [annotation("_In_")]
    UINT AlignedByteOffsetForArgs,
  );

  void DrawInstancedIndirect(
    // [annotation("_In_")]
    ID3D11Buffer pBufferForArgs,
    // [annotation("_In_")]
    UINT AlignedByteOffsetForArgs,
  );

  void Dispatch(
    // [annotation("_In_")]
    UINT ThreadGroupCountX,
    // [annotation("_In_")]
    UINT ThreadGroupCountY,
    // [annotation("_In_")]
    UINT ThreadGroupCountZ,
  );

  void DispatchIndirect(
    // [annotation("_In_")]
    ID3D11Buffer pBufferForArgs,
    // [annotation("_In_")]
    UINT AlignedByteOffsetForArgs,
  );

  void RSSetState(
    // [annotation("_In_opt_")]
    ID3D11RasterizerState pRasterizerState,
  );

  void RSSetViewports(
    // [annotation("_In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)")]
    UINT NumViewports,
    // [annotation("_In_reads_opt_(NumViewports)")]
    in D3D11_VIEWPORT* pViewports,
  );

  void RSSetScissorRects(
    // [annotation("_In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)")]
    UINT NumRects,
    // [annotation("_In_reads_opt_(NumRects)")]
    in D3D11_RECT* pRects,
  );

  void CopySubresourceRegion(
    // [annotation("_In_")]
    ID3D11Resource pDstResource,
    // [annotation("_In_")]
    UINT DstSubresource,
    // [annotation("_In_")]
    UINT DstX,
    // [annotation("_In_")]
    UINT DstY,
    // [annotation("_In_")]
    UINT DstZ,
    // [annotation("_In_")]
    ID3D11Resource pSrcResource,
    // [annotation("_In_")]
    UINT SrcSubresource,
    // [annotation("_In_opt_")]
    in D3D11_BOX* pSrcBox,
  );

  void CopyResource(
    // [annotation("_In_")]
    ID3D11Resource pDstResource,
    // [annotation("_In_")]
    ID3D11Resource pSrcResource,
  );

  void UpdateSubresource(
    // [annotation("_In_")]
    ID3D11Resource pDstResource,
    // [annotation("_In_")]
    UINT DstSubresource,
    // [annotation("_In_opt_")]
    in D3D11_BOX* pDstBox,
    // [annotation("_In_")]
    in void* pSrcData,
    // [annotation("_In_")]
    UINT SrcRowPitch,
    // [annotation("_In_")]
    UINT SrcDepthPitch,
  );

  void CopyStructureCount(
    // [annotation("_In_")]
    ID3D11Buffer pDstBuffer,
    // [annotation("_In_")]
    UINT DstAlignedByteOffset,
    // [annotation("_In_")]
    ID3D11UnorderedAccessView pSrcView,
  );

  void ClearRenderTargetView(
    // [annotation("_In_")]
    ID3D11RenderTargetView pRenderTargetView,
    // [annotation("_In_")]
    in FLOAT[4] ColorRGBA,
  );

  void ClearUnorderedAccessViewUint(
    // [annotation("_In_")]
    ID3D11UnorderedAccessView pUnorderedAccessView,
    // [annotation("_In_")]
    in UINT[4] Values,
  );

  void ClearUnorderedAccessViewFloat(
    // [annotation("_In_")]
    ID3D11UnorderedAccessView pUnorderedAccessView,
    // [annotation("_In_")]
    in FLOAT[4] Values,
  );

  void ClearDepthStencilView(
    // [annotation("_In_")]
    ID3D11DepthStencilView pDepthStencilView,
    // [annotation("_In_")]
    UINT ClearFlags,
    // [annotation("_In_")]
    FLOAT Depth,
    // [annotation("_In_")]
    UINT8 Stencil,
  );

  void GenerateMips(
    // [annotation("_In_")]
    ID3D11ShaderResourceView pShaderResourceView,
  );

  void SetResourceMinLOD(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    FLOAT MinLOD,
  );

  FLOAT GetResourceMinLOD(
    // [annotation("_In_")]
    ID3D11Resource pResource,
  );

  void ResolveSubresource(
    // [annotation("_In_")]
    ID3D11Resource pDstResource,
    // [annotation("_In_")]
    UINT DstSubresource,
    // [annotation("_In_")]
    ID3D11Resource pSrcResource,
    // [annotation("_In_")]
    UINT SrcSubresource,
    // [annotation("_In_")]
    DXGI_FORMAT Format,
  );

  void ExecuteCommandList(
    // [annotation("_In_")]
    ID3D11CommandList pCommandList,
    BOOL RestoreContextState,
  );

  void HSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void HSSetShader(
    // [annotation("_In_opt_")]
    ID3D11HullShader pHullShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void HSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void HSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void DSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void DSSetShader(
    // [annotation("_In_opt_")]
    ID3D11DomainShader pDomainShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void DSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void DSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void CSSetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_In_reads_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void CSSetUnorderedAccessViews(
    // [annotation("_In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )")]
    UINT NumUAVs,
    // [annotation("_In_reads_opt_(NumUAVs)")]
    ID3D11UnorderedAccessView* ppUnorderedAccessViews,
    // [annotation("_In_reads_opt_(NumUAVs)")]
    in UINT* pUAVInitialCounts,
  );

  void CSSetShader(
    // [annotation("_In_opt_")]
    ID3D11ComputeShader pComputeShader,
    // [annotation("_In_reads_opt_(NumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    UINT NumClassInstances,
  );

  void CSSetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_In_reads_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void CSSetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_In_reads_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void VSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void PSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void PSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11PixelShader* ppPixelShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void PSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void VSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11VertexShader* ppVertexShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void PSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void IAGetInputLayout(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11InputLayout* ppInputLayout,
  );

  void IAGetVertexBuffers(
    // [annotation("_In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppVertexBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    UINT* pStrides,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    UINT* pOffsets,
  );

  void IAGetIndexBuffer(
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11Buffer* pIndexBuffer,
    // [annotation("_Out_opt_")]
    DXGI_FORMAT* Format,
    // [annotation("_Out_opt_")]
    UINT* Offset,
  );

  void GSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void GSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11GeometryShader* ppGeometryShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void IAGetPrimitiveTopology(
    // [annotation("_Out_")]
    D3D11_PRIMITIVE_TOPOLOGY* pTopology,
  );

  void VSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void VSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void GetPredication(
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11Predicate* ppPredicate,
    // [annotation("_Out_opt_")]
    BOOL* pPredicateValue,
  );

  void GSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void GSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void OMGetRenderTargets(
    // [annotation("_In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11RenderTargetView* ppRenderTargetViews,
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11DepthStencilView* ppDepthStencilView,
  );

  void OMGetRenderTargetsAndUnorderedAccessViews(
    // [annotation("_In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )")]
    UINT NumRTVs,
    // [annotation("_Out_writes_opt_(NumRTVs)")]
    ID3D11RenderTargetView* ppRenderTargetViews,
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11DepthStencilView* ppDepthStencilView,
    // [annotation("_In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )")]
    UINT UAVStartSlot,
    // [annotation("_In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )")]
    UINT NumUAVs,
    // [annotation("_Out_writes_opt_(NumUAVs)")]
    ID3D11UnorderedAccessView* ppUnorderedAccessViews,
  );

  void OMGetBlendState(
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11BlendState* ppBlendState,
    // [annotation("_Out_opt_")]
    FLOAT[4] BlendFactor,
    // [annotation("_Out_opt_")]
    UINT* pSampleMask,
  );

  void OMGetDepthStencilState(
    // [annotation("_Outptr_opt_result_maybenull_")]
    ID3D11DepthStencilState* ppDepthStencilState,
    // [annotation("_Out_opt_")]
    UINT* pStencilRef,
  );

  void SOGetTargets(
    // [annotation("_In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppSOTargets,
  );

  void RSGetState(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11RasterizerState* ppRasterizerState,
  );

  void RSGetViewports(
    // [annotation("_Inout_                                                                          ")]
    UINT* pNumViewports,
    // [annotation("_Out_writes_opt_(*pNumViewports)")]
    D3D11_VIEWPORT* pViewports,
  );

  void RSGetScissorRects(
    // [annotation("_Inout_                                                                          ")]
    UINT* pNumRects,
    // [annotation("_Out_writes_opt_(*pNumRects)")]
    D3D11_RECT* pRects,
  );

  void HSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void HSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11HullShader* ppHullShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void HSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void HSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void DSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void DSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11DomainShader* ppDomainShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void DSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void DSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void CSGetShaderResources(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )")]
    UINT NumViews,
    // [annotation("_Out_writes_opt_(NumViews)")]
    ID3D11ShaderResourceView* ppShaderResourceViews,
  );

  void CSGetUnorderedAccessViews(
    // [annotation("_In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )")]
    UINT NumUAVs,
    // [annotation("_Out_writes_opt_(NumUAVs)")]
    ID3D11UnorderedAccessView* ppUnorderedAccessViews,
  );

  void CSGetShader(
    // [annotation("_Outptr_result_maybenull_")]
    ID3D11ComputeShader* ppComputeShader,
    // [annotation("_Out_writes_opt_(*pNumClassInstances)")]
    ID3D11ClassInstance* ppClassInstances,
    // [annotation("_Inout_opt_")]
    UINT* pNumClassInstances,
  );

  void CSGetSamplers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )")]
    UINT NumSamplers,
    // [annotation("_Out_writes_opt_(NumSamplers)")]
    ID3D11SamplerState* ppSamplers,
  );

  void CSGetConstantBuffers(
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )")]
    UINT StartSlot,
    // [annotation("_In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )")]
    UINT NumBuffers,
    // [annotation("_Out_writes_opt_(NumBuffers)")]
    ID3D11Buffer* ppConstantBuffers,
  );

  void ClearState(  );

  void Flush(  );

  D3D11_DEVICE_CONTEXT_TYPE GetType(  );

  UINT GetContextFlags(  );

  HRESULT FinishCommandList(
    BOOL RestoreDeferredContextState,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11CommandList* ppCommandList,
  );

}

alias APP_DEPRECATED_HRESULT = HRESULT;

struct D3D11_VIDEO_DECODER_DESC
{
  GUID Guid;
  UINT SampleWidth;
  UINT SampleHeight;
  DXGI_FORMAT OutputFormat;
}

struct D3D11_VIDEO_DECODER_CONFIG
{
  GUID guidConfigBitstreamEncryption;
  GUID guidConfigMBcontrolEncryption;
  GUID guidConfigResidDiffEncryption;
  UINT ConfigBitstreamRaw;
  UINT ConfigMBcontrolRasterOrder;
  UINT ConfigResidDiffHost;
  UINT ConfigSpatialResid8;
  UINT ConfigResid8Subtraction;
  UINT ConfigSpatialHost8or9Clipping;
  UINT ConfigSpatialResidInterleaved;
  UINT ConfigIntraResidUnsigned;
  UINT ConfigResidDiffAccelerator;
  UINT ConfigHostInverseScan;
  UINT ConfigSpecificIDCT;
  UINT Config4GroupedCoefs;
  USHORT ConfigMinRenderTargetBuffCount;
  USHORT ConfigDecoderSpecific;
}

alias D3D11_VIDEO_DECODER_BUFFER_TYPE = int;
enum : D3D11_VIDEO_DECODER_BUFFER_TYPE
{
  D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS          = 0,
  D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL          = 1,
  D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE         = 2,
  D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL          = 3,
  D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
  D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL               = 5,
  D3D11_VIDEO_DECODER_BUFFER_BITSTREAM                   = 6,
  D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR               = 7,
  D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN                  = 8,
}

struct D3D11_AES_CTR_IV
{
  UINT64 IV;
  UINT64 Count;
}

struct D3D11_ENCRYPTED_BLOCK_INFO
{
  UINT NumEncryptedBytesAtBeginning;
  UINT NumBytesInSkipPattern;
  UINT NumBytesInEncryptPattern;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC
{
  D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
  UINT BufferIndex;
  UINT DataOffset;
  UINT DataSize;
  UINT FirstMBaddress;
  UINT NumMBsInBuffer;
  UINT Width;
  UINT Height;
  UINT Stride;
  UINT ReservedBits;
  // [annotation("_Field_size_opt_(IVSize)")]
  void* pIV;
  UINT IVSize;
  BOOL PartialEncryption;
  D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}

struct D3D11_VIDEO_DECODER_EXTENSION
{
  UINT Function;
  // [annotation("_Field_size_(PrivateInputDataSize)")]
  void* pPrivateInputData;
  UINT PrivateInputDataSize;
  // [annotation("_Field_size_(PrivateOutputDataSize)")]
  void* pPrivateOutputData;
  UINT PrivateOutputDataSize;
  UINT ResourceCount;
  // [annotation("_Field_size_opt_(ResourceCount)")]
  ID3D11Resource* ppResourceList;
}

mixin DEFINE_GUID!(ID3D11VideoDecoder, "3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C");
// [uuid("3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C")][object][local][pointer_default("unique")]
interface ID3D11VideoDecoder : ID3D11DeviceChild
{
extern(Windows):

  HRESULT GetCreationParameters(
    // [annotation("_Out_")]
    D3D11_VIDEO_DECODER_DESC* pVideoDesc,
    // [annotation("_Out_")]
    D3D11_VIDEO_DECODER_CONFIG* pConfig,
  );

  HRESULT GetDriverHandle(
    // [annotation("_Out_")]
    HANDLE* pDriverHandle,
  );

}

alias D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = int;
enum : D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
{
  D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT  = 0x00000001,
  D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x00000002,
}

alias D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
{
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE            = 0x1,
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC                   = 0x2,
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION    = 0x4,
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x8,
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE           = 0x10,
}

alias D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
{
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL         = 0x1,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION       = 0x2,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY           = 0x4,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE      = 0x8,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY             = 0x10,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO             = 0x20,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION           = 0x40,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM       = 0x80,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 0x100,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR             = 0x200,
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE       = 0x400,
}

alias D3D11_VIDEO_PROCESSOR_FILTER_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_FILTER_CAPS
{
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS         = 0x1,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST           = 0x2,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE                = 0x4,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION         = 0x8,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION    = 0x10,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT   = 0x20,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 0x40,
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT  = 0x80,
}

alias D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
{
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED     = 0x1,
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP        = 0x2,
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY       = 0x4,
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 0x8,
}

alias D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
{
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE             = 0x01,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING           = 0x02,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT    = 0x04,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION    = 0x08,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING  = 0x10,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 0x20,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION    = 0x40,
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING  = 0x80,
}

alias D3D11_VIDEO_PROCESSOR_STEREO_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_STEREO_CAPS
{
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET        = 0x01,
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED    = 0x02,
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 0x04,
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD       = 0x08,
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE          = 0x10,
}

struct D3D11_VIDEO_PROCESSOR_CAPS
{
  UINT DeviceCaps;
  UINT FeatureCaps;
  UINT FilterCaps;
  UINT InputFormatCaps;
  UINT AutoStreamCaps;
  UINT StereoCaps;
  UINT RateConversionCapsCount;
  UINT MaxInputStreams;
  UINT MaxStreamStates;
}

alias D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
{
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND               = 0x1,
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB                 = 0x2,
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE            = 0x4,
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x8,
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE                = 0x10,
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION           = 0x20,
}

alias D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = int;
enum : D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
{
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32           = 0x1,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22           = 0x2,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224         = 0x4,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332         = 0x8,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322        = 0x10,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55           = 0x20,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64           = 0x40,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87           = 0x80,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 0x100,
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER        = 0x80000000,
}

struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
{
  UINT PastFrames;
  UINT FutureFrames;
  UINT ProcessorCaps;
  UINT ITelecineCaps;
  UINT CustomRateCount;
}

alias D3D11_CONTENT_PROTECTION_CAPS = int;
enum : D3D11_CONTENT_PROTECTION_CAPS
{
  D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE                           = 0x00000001,
  D3D11_CONTENT_PROTECTION_CAPS_HARDWARE                           = 0x00000002,
  D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON               = 0x00000004,
  D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION                 = 0x00000008,
  D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY                        = 0x00000010,
  D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY                = 0x00000020,
  D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK                = 0x00000040,
  D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY            = 0x00000080,
  D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV                  = 0x00000100,
  D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY             = 0x00000200,
  D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT                     = 0x00000400,
  D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED      = 0x00000800,
  D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x00001000,
  D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN                  = 0x00002000,
  D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION         = 0x00004000,
}

struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
{
  UINT Caps;
  UINT KeyExchangeTypeCount;
  UINT BlockAlignmentSize;
  ULONGLONG ProtectedMemorySize;
}

struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
{
  DXGI_RATIONAL CustomRate;
  UINT OutputFrames;
  BOOL InputInterlaced;
  UINT InputFramesOrFields;
}

alias D3D11_VIDEO_PROCESSOR_FILTER = int;
enum : D3D11_VIDEO_PROCESSOR_FILTER
{
  D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS         = 0,
  D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST           = 1,
  D3D11_VIDEO_PROCESSOR_FILTER_HUE                = 2,
  D3D11_VIDEO_PROCESSOR_FILTER_SATURATION         = 3,
  D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION    = 4,
  D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT   = 5,
  D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
  D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT  = 7,
}

struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
{
  int Minimum;
  int Maximum;
  int Default;
  float Multiplier;
}

alias D3D11_VIDEO_FRAME_FORMAT = int;
enum : D3D11_VIDEO_FRAME_FORMAT
{
  D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE                   = 0,
  D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST    = 1,
  D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2,
}

alias D3D11_VIDEO_USAGE = int;
enum : D3D11_VIDEO_USAGE
{
  D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0,
  D3D11_VIDEO_USAGE_OPTIMAL_SPEED   = 1,
  D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2,
}

struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
{
  D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
  DXGI_RATIONAL InputFrameRate;
  UINT InputWidth;
  UINT InputHeight;
  DXGI_RATIONAL OutputFrameRate;
  UINT OutputWidth;
  UINT OutputHeight;
  D3D11_VIDEO_USAGE Usage;
}

mixin DEFINE_GUID!(ID3D11VideoProcessorEnumerator, "31627037-53AB-4200-9061-05FAA9AB45F9");
// [uuid("31627037-53AB-4200-9061-05FAA9AB45F9")][object][local][pointer_default("unique")]
interface ID3D11VideoProcessorEnumerator : ID3D11DeviceChild
{
extern(Windows):

  HRESULT GetVideoProcessorContentDesc(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pContentDesc,
  );

  HRESULT CheckVideoProcessorFormat(
    // [annotation("_In_")]
    DXGI_FORMAT Format,
    // [annotation("_Out_")]
    UINT* pFlags,
  );

  HRESULT GetVideoProcessorCaps(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_CAPS* pCaps,
  );

  HRESULT GetVideoProcessorRateConversionCaps(
    // [annotation("_In_")]
    UINT TypeIndex,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps,
  );

  HRESULT GetVideoProcessorCustomRate(
    // [annotation("_In_")]
    UINT TypeIndex,
    // [annotation("_In_")]
    UINT CustomRateIndex,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_CUSTOM_RATE* pRate,
  );

  HRESULT GetVideoProcessorFilterRange(
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_FILTER Filter,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_FILTER_RANGE* pRange,
  );

}

struct D3D11_VIDEO_COLOR_RGBA
{
  float R;
  float G;
  float B;
  float A;
}

struct D3D11_VIDEO_COLOR_YCbCrA
{
  float Y;
  float Cb;
  float Cr;
  float A;
}

struct D3D11_VIDEO_COLOR
{

  union
  {
    D3D11_VIDEO_COLOR_YCbCrA YCbCr;
    D3D11_VIDEO_COLOR_RGBA RGBA;
  }
}

alias D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = int;
enum : D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
{
  D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0,
  D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235    = 1,
  D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255     = 2,
}


private import std.bitmanip : bitfields;
struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
{
  mixin(bitfields!(
    UINT, "Usage",         1,
    UINT, "RGB_Range",     1,
    UINT, "YCbCr_Matrix",  1,
    UINT, "YCbCr_xvYCC",   1,
    UINT, "Nominal_Range", 2,
    UINT, "Reserved",      26,
  ));
}

alias D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = int;
enum : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
{
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE        = 0,
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND    = 1,
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION   = 2,
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
}

alias D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = int;
enum : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
{
  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF   = 1,
  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2,
}

alias D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = int;
enum : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
{
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO               = 0,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL         = 1,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL           = 2,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE           = 3,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET        = 4,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED    = 5,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD       = 7,
}

alias D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = int;
enum : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
{
  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE   = 0,
  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2,
}

alias D3D11_VIDEO_PROCESSOR_ROTATION = int;
enum : D3D11_VIDEO_PROCESSOR_ROTATION
{
  D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
  D3D11_VIDEO_PROCESSOR_ROTATION_90       = 1,
  D3D11_VIDEO_PROCESSOR_ROTATION_180      = 2,
  D3D11_VIDEO_PROCESSOR_ROTATION_270      = 3,
}

struct D3D11_VIDEO_PROCESSOR_STREAM
{
  BOOL Enable;
  UINT OutputIndex;
  UINT InputFrameOrField;
  UINT PastFrames;
  UINT FutureFrames;
  // [annotation("_Field_size_(PastFrames)")]
  ID3D11VideoProcessorInputView* ppPastSurfaces;
  ID3D11VideoProcessorInputView pInputSurface;
  // [annotation("_Field_size_(FutureFrames)")]
  ID3D11VideoProcessorInputView* ppFutureSurfaces;
  // [annotation("_Field_size_opt_(PastFrames)")]
  ID3D11VideoProcessorInputView* ppPastSurfacesRight;
  ID3D11VideoProcessorInputView pInputSurfaceRight;
  // [annotation("_Field_size_(FutureFrames)")]
  ID3D11VideoProcessorInputView* ppFutureSurfacesRight;
}

mixin DEFINE_GUID!(ID3D11VideoProcessor, "1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C");
// [uuid("1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C")][object][local][pointer_default("unique")]
interface ID3D11VideoProcessor : ID3D11DeviceChild
{
extern(Windows):

  void GetContentDesc(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pDesc,
  );

  void GetRateConversionCaps(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps,
  );

}

enum D3D11_OMAC_SIZE = 16;

struct D3D11_OMAC
{
  BYTE[D3D11_OMAC_SIZE] Omac;
}

alias D3D11_AUTHENTICATED_CHANNEL_TYPE = int;
enum : D3D11_AUTHENTICATED_CHANNEL_TYPE
{
  D3D11_AUTHENTICATED_CHANNEL_D3D11           = 1,
  D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
  D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3,
}

mixin DEFINE_GUID!(ID3D11AuthenticatedChannel, "3015A308-DCBD-47aa-A747-192486D14D4A");
// [uuid("3015A308-DCBD-47aa-A747-192486D14D4A")][object][local][pointer_default("unique")]
interface ID3D11AuthenticatedChannel : ID3D11DeviceChild
{
extern(Windows):

  HRESULT GetCertificateSize(
    // [annotation("_Out_")]
    UINT* pCertificateSize,
  );

  HRESULT GetCertificate(
    // [annotation("_In_")]
    UINT CertificateSize,
    // [annotation("_Out_writes_bytes_(CertificateSize)")]
    BYTE* pCertificate,
  );

  void GetChannelHandle(
    // [annotation("_Out_")]
    HANDLE* pChannelHandle,
  );

}

struct D3D11_AUTHENTICATED_QUERY_INPUT
{
  GUID QueryType;
  HANDLE hChannel;
  UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT
{
  D3D11_OMAC omac;
  GUID QueryType;
  HANDLE hChannel;
  UINT SequenceNumber;
  HRESULT ReturnCode;
}

union D3D11_AUTHENTICATED_PROTECTION_FLAGS
{
  static struct FlagsType
  {
    mixin(bitfields!(
      UINT, "ProtectionEnabled",           1,
      UINT, "OverlayOrFullscreenRequired", 1,
      UINT, "Reserved",                    30,
    ));
  }

  FlagsType Flags;
  UINT Value;
}

struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}

struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}

struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DecoderHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DecoderHandle;
  HANDLE CryptoSessionHandle;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT RestrictedSharedResourceProcessCount;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  UINT ProcessIndex;
}

alias D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = int;
enum : D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
{
  D3D11_PROCESSIDTYPE_UNKNOWN = 0,
  D3D11_PROCESSIDTYPE_DWM     = 1,
  D3D11_PROCESSIDTYPE_HANDLE  = 2,
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT ProcessIndex;
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
  HANDLE ProcessHandle;
}

struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT UnrestrictedProtectedSharedResourceCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDIndex;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDIndex;
  UINT64 OutputID;
}

alias D3D11_BUS_TYPE = int;
enum : D3D11_BUS_TYPE
{
  D3D11_BUS_TYPE_OTHER                                            = 0x00000000,
  D3D11_BUS_TYPE_PCI                                              = 0x00000001,
  D3D11_BUS_TYPE_PCIX                                             = 0x00000002,
  D3D11_BUS_TYPE_PCIEXPRESS                                       = 0x00000003,
  D3D11_BUS_TYPE_AGP                                              = 0x00000004,
  D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET                       = 0x00010000,
  D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP          = 0x00020000,
  D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET        = 0x00030000,
  D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR                = 0x00040000,
  D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000,
  D3D11_BUS_IMPL_MODIFIER_NON_STANDARD                            = 0x80000000,
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_BUS_TYPE BusType;
  BOOL AccessibleInContiguousBlocks;
  BOOL AccessibleInNonContiguousBlocks;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT EncryptionGuidCount;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  UINT EncryptionGuidIndex;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT EncryptionGuidIndex;
  GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
{
  D3D11_OMAC omac;
  GUID ConfigureType;
  HANDLE hChannel;
  UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
{
  D3D11_OMAC omac;
  GUID ConfigureType;
  HANDLE hChannel;
  UINT SequenceNumber;
  HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  UINT StartSequenceQuery;
  UINT StartSequenceConfigure;
}

struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}

struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  HANDLE DecoderHandle;
  HANDLE CryptoSessionHandle;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
  HANDLE ProcessHandle;
  BOOL AllowAccess;
}

struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  GUID EncryptionGuid;
}

mixin DEFINE_GUID!(ID3D11CryptoSession, "9B32F9AD-BDCC-40a6-A39D-D5C865845720");
// [uuid("9B32F9AD-BDCC-40a6-A39D-D5C865845720")][object][local][pointer_default("unique")]
interface ID3D11CryptoSession : ID3D11DeviceChild
{
extern(Windows):

  void GetCryptoType(
    // [annotation("_Out_")]
    GUID* pCryptoType,
  );

  void GetDecoderProfile(
    // [annotation("_Out_")]
    GUID* pDecoderProfile,
  );

  HRESULT GetCertificateSize(
    // [annotation("_Out_")]
    UINT* pCertificateSize,
  );

  HRESULT GetCertificate(
    // [annotation("_In_")]
    UINT CertificateSize,
    // [annotation("_Out_writes_bytes_(CertificateSize)")]
    BYTE* pCertificate,
  );

  void GetCryptoSessionHandle(
    // [annotation("_Out_")]
    HANDLE* pCryptoSessionHandle,
  );

}

alias D3D11_VDOV_DIMENSION = int;
enum : D3D11_VDOV_DIMENSION
{
  D3D11_VDOV_DIMENSION_UNKNOWN   = 0,
  D3D11_VDOV_DIMENSION_TEXTURE2D = 1,
}

struct D3D11_TEX2D_VDOV
{
  UINT ArraySlice;
}

struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
{
  GUID DecodeProfile;
  D3D11_VDOV_DIMENSION ViewDimension;

  union
  {
    D3D11_TEX2D_VDOV Texture2D;
  }
}

mixin DEFINE_GUID!(ID3D11VideoDecoderOutputView, "C2931AEA-2A85-4f20-860F-FBA1FD256E18");
// [uuid("C2931AEA-2A85-4f20-860F-FBA1FD256E18")][object][local][pointer_default("unique")]
interface ID3D11VideoDecoderOutputView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* pDesc,
  );

}

alias D3D11_VPIV_DIMENSION = int;
enum : D3D11_VPIV_DIMENSION
{
  D3D11_VPIV_DIMENSION_UNKNOWN   = 0,
  D3D11_VPIV_DIMENSION_TEXTURE2D = 1,
}

struct D3D11_TEX2D_VPIV
{
  UINT MipSlice;
  UINT ArraySlice;
}

struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
{
  UINT FourCC;
  D3D11_VPIV_DIMENSION ViewDimension;

  union
  {
    D3D11_TEX2D_VPIV Texture2D;
  }
}

mixin DEFINE_GUID!(ID3D11VideoProcessorInputView, "11EC5A5F-51DC-4945-AB34-6E8C21300EA5");
// [uuid("11EC5A5F-51DC-4945-AB34-6E8C21300EA5")][object][local][pointer_default("unique")]
interface ID3D11VideoProcessorInputView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* pDesc,
  );

}

alias D3D11_VPOV_DIMENSION = int;
enum : D3D11_VPOV_DIMENSION
{
  D3D11_VPOV_DIMENSION_UNKNOWN        = 0,
  D3D11_VPOV_DIMENSION_TEXTURE2D      = 1,
  D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2,
}

struct D3D11_TEX2D_VPOV
{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_VPOV
{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
{
  D3D11_VPOV_DIMENSION ViewDimension;

  union
  {
    D3D11_TEX2D_VPOV Texture2D;
    D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
  }
}

mixin DEFINE_GUID!(ID3D11VideoProcessorOutputView, "A048285E-25A9-4527-BD93-D68B68C44254");
// [uuid("A048285E-25A9-4527-BD93-D68B68C44254")][object][local][pointer_default("unique")]
interface ID3D11VideoProcessorOutputView : ID3D11View
{
extern(Windows):

  void GetDesc(
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* pDesc,
  );

}

mixin DEFINE_GUID!(ID3D11VideoContext, "61F21C45-3C0E-4a74-9CEA-67100D9AD5E4");
// [uuid("61F21C45-3C0E-4a74-9CEA-67100D9AD5E4")][object][local][pointer_default("unique")]
interface ID3D11VideoContext : ID3D11DeviceChild
{
extern(Windows):

  HRESULT GetDecoderBuffer(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
    D3D11_VIDEO_DECODER_BUFFER_TYPE Type,
    // [annotation("_Out_")]
    UINT* pBufferSize,
    // [annotation("_Outptr_result_bytebuffer_(*pBufferSize)")]
    void** ppBuffer,
  );

  HRESULT ReleaseDecoderBuffer(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
    // [annotation("_In_")]
    D3D11_VIDEO_DECODER_BUFFER_TYPE Type,
  );

  HRESULT DecoderBeginFrame(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
    // [annotation("_In_")]
    ID3D11VideoDecoderOutputView pView,
    UINT ContentKeySize,
    // [annotation("_In_reads_bytes_opt_(ContentKeySize)")]
    in void* pContentKey,
  );

  HRESULT DecoderEndFrame(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
  );

  HRESULT SubmitDecoderBuffers(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
    // [annotation("_In_")]
    UINT NumBuffers,
    // [annotation("_In_reads_(NumBuffers)")]
    in D3D11_VIDEO_DECODER_BUFFER_DESC* pBufferDesc,
  );

  APP_DEPRECATED_HRESULT DecoderExtension(
    // [annotation("_In_")]
    ID3D11VideoDecoder pDecoder,
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_EXTENSION* pExtensionData,
  );

  void VideoProcessorSetOutputTargetRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_opt_")]
    in RECT* pRect,
  );

  void VideoProcessorSetOutputBackgroundColor(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    BOOL YCbCr,
    // [annotation("_In_")]
    in D3D11_VIDEO_COLOR* pColor,
  );

  void VideoProcessorSetOutputColorSpace(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    in D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace,
  );

  void VideoProcessorSetOutputAlphaFillMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode,
    // [annotation("_In_")]
    UINT StreamIndex,
  );

  void VideoProcessorSetOutputConstriction(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    SIZE Size,
  );

  void VideoProcessorSetOutputStereoMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    BOOL Enable,
  );

  APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtension(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    in GUID* pExtensionGuid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_")]
    void* pData,
  );

  void VideoProcessorGetOutputTargetRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    BOOL* Enabled,
    // [annotation("_Out_")]
    RECT* pRect,
  );

  void VideoProcessorGetOutputBackgroundColor(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    BOOL* pYCbCr,
    // [annotation("_Out_")]
    D3D11_VIDEO_COLOR* pColor,
  );

  void VideoProcessorGetOutputColorSpace(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace,
  );

  void VideoProcessorGetOutputAlphaFillMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE* pAlphaFillMode,
    // [annotation("_Out_")]
    UINT* pStreamIndex,
  );

  void VideoProcessorGetOutputConstriction(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    SIZE* pSize,
  );

  void VideoProcessorGetOutputStereoMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_Out_")]
    BOOL* pEnabled,
  );

  APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtension(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    in GUID* pExtensionGuid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_Out_writes_bytes_(DataSize)")]
    void* pData,
  );

  void VideoProcessorSetStreamFrameFormat(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    D3D11_VIDEO_FRAME_FORMAT FrameFormat,
  );

  void VideoProcessorSetStreamColorSpace(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    in D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace,
  );

  void VideoProcessorSetStreamOutputRate(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate,
    // [annotation("_In_")]
    BOOL RepeatFrame,
    // [annotation("_In_opt_")]
    in DXGI_RATIONAL* pCustomRate,
  );

  void VideoProcessorSetStreamSourceRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_opt_")]
    in RECT* pRect,
  );

  void VideoProcessorSetStreamDestRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_opt_")]
    in RECT* pRect,
  );

  void VideoProcessorSetStreamAlpha(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    FLOAT Alpha,
  );

  void VideoProcessorSetStreamPalette(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    UINT Count,
    // [annotation("_In_reads_opt_(Count)")]
    in UINT* pEntries,
  );

  void VideoProcessorSetStreamPixelAspectRatio(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_opt_")]
    in DXGI_RATIONAL* pSourceAspectRatio,
    // [annotation("_In_opt_")]
    in DXGI_RATIONAL* pDestinationAspectRatio,
  );

  void VideoProcessorSetStreamLumaKey(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    FLOAT Lower,
    // [annotation("_In_")]
    FLOAT Upper,
  );

  void VideoProcessorSetStreamStereoFormat(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format,
    // [annotation("_In_")]
    BOOL LeftViewFrame0,
    // [annotation("_In_")]
    BOOL BaseViewFrame0,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode,
    // [annotation("_In_")]
    int MonoOffset,
  );

  void VideoProcessorSetStreamAutoProcessingMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
  );

  void VideoProcessorSetStreamFilter(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_FILTER Filter,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    int Level,
  );

  APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtension(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    in GUID* pExtensionGuid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_")]
    void* pData,
  );

  void VideoProcessorGetStreamFrameFormat(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    D3D11_VIDEO_FRAME_FORMAT* pFrameFormat,
  );

  void VideoProcessorGetStreamColorSpace(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace,
  );

  void VideoProcessorGetStreamOutputRate(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE* pOutputRate,
    // [annotation("_Out_")]
    BOOL* pRepeatFrame,
    // [annotation("_Out_")]
    DXGI_RATIONAL* pCustomRate,
  );

  void VideoProcessorGetStreamSourceRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    RECT* pRect,
  );

  void VideoProcessorGetStreamDestRect(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    RECT* pRect,
  );

  void VideoProcessorGetStreamAlpha(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    FLOAT* pAlpha,
  );

  void VideoProcessorGetStreamPalette(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    UINT Count,
    // [annotation("_Out_writes_(Count)")]
    UINT* pEntries,
  );

  void VideoProcessorGetStreamPixelAspectRatio(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    DXGI_RATIONAL* pSourceAspectRatio,
    // [annotation("_Out_")]
    DXGI_RATIONAL* pDestinationAspectRatio,
  );

  void VideoProcessorGetStreamLumaKey(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    FLOAT* pLower,
    // [annotation("_Out_")]
    FLOAT* pUpper,
  );

  void VideoProcessorGetStreamStereoFormat(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnable,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT* pFormat,
    // [annotation("_Out_")]
    BOOL* pLeftViewFrame0,
    // [annotation("_Out_")]
    BOOL* pBaseViewFrame0,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE* pFlipMode,
    // [annotation("_Out_")]
    int* MonoOffset,
  );

  void VideoProcessorGetStreamAutoProcessingMode(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnabled,
  );

  void VideoProcessorGetStreamFilter(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_FILTER Filter,
    // [annotation("_Out_")]
    BOOL* pEnabled,
    // [annotation("_Out_")]
    int* pLevel,
  );

  APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtension(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    in GUID* pExtensionGuid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_Out_writes_bytes_(DataSize)")]
    void* pData,
  );

  HRESULT VideoProcessorBlt(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    ID3D11VideoProcessorOutputView pView,
    // [annotation("_In_")]
    UINT OutputFrame,
    // [annotation("_In_")]
    UINT StreamCount,
    // [annotation("_In_reads_(StreamCount)")]
    in D3D11_VIDEO_PROCESSOR_STREAM* pStreams,
  );

  HRESULT NegotiateCryptoSessionKeyExchange(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_Inout_updates_bytes_(DataSize)")]
    void* pData,
  );

  void EncryptionBlt(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
    // [annotation("_In_")]
    ID3D11Texture2D pSrcSurface,
    // [annotation("_In_")]
    ID3D11Texture2D pDstSurface,
    // [annotation("_In_")]
    UINT IVSize,
    // [annotation("_Inout_opt_bytecount_(IVSize)")]
    void* pIV,
  );

  void DecryptionBlt(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
    // [annotation("_In_")]
    ID3D11Texture2D pSrcSurface,
    // [annotation("_In_")]
    ID3D11Texture2D pDstSurface,
    // [annotation("_In_opt_")]
    D3D11_ENCRYPTED_BLOCK_INFO* pEncryptedBlockInfo,
    // [annotation("_In_")]
    UINT ContentKeySize,
    // [annotation("_In_reads_bytes_opt_(ContentKeySize)")]
    in void* pContentKey,
    // [annotation("_In_")]
    UINT IVSize,
    // [annotation("_Inout_opt_bytecount_(IVSize)")]
    void* pIV,
  );

  void StartSessionKeyRefresh(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
    // [annotation("_In_")]
    UINT RandomNumberSize,
    // [annotation("_Out_writes_bytes_(RandomNumberSize)")]
    void* pRandomNumber,
  );

  void FinishSessionKeyRefresh(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
  );

  HRESULT GetEncryptionBltKey(
    // [annotation("_In_")]
    ID3D11CryptoSession pCryptoSession,
    // [annotation("_In_")]
    UINT KeySize,
    // [annotation("_Out_writes_bytes_(KeySize)")]
    void* pReadbackKey,
  );

  HRESULT NegotiateAuthenticatedChannelKeyExchange(
    // [annotation("_In_")]
    ID3D11AuthenticatedChannel pChannel,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_Inout_updates_bytes_(DataSize)")]
    void* pData,
  );

  HRESULT QueryAuthenticatedChannel(
    // [annotation("_In_")]
    ID3D11AuthenticatedChannel pChannel,
    // [annotation("_In_")]
    UINT InputSize,
    // [annotation("_In_reads_bytes_(InputSize)")]
    in void* pInput,
    // [annotation("_In_")]
    UINT OutputSize,
    // [annotation("_Out_writes_bytes_(OutputSize)")]
    void* pOutput,
  );

  HRESULT ConfigureAuthenticatedChannel(
    // [annotation("_In_")]
    ID3D11AuthenticatedChannel pChannel,
    // [annotation("_In_")]
    UINT InputSize,
    // [annotation("_In_reads_bytes_(InputSize)")]
    in void* pInput,
    // [annotation("_Out_")]
    D3D11_AUTHENTICATED_CONFIGURE_OUTPUT* pOutput,
  );

  void VideoProcessorSetStreamRotation(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_In_")]
    BOOL Enable,
    // [annotation("_In_")]
    D3D11_VIDEO_PROCESSOR_ROTATION Rotation,
  );

  void VideoProcessorGetStreamRotation(
    // [annotation("_In_")]
    ID3D11VideoProcessor pVideoProcessor,
    // [annotation("_In_")]
    UINT StreamIndex,
    // [annotation("_Out_")]
    BOOL* pEnable,
    // [annotation("_Out_")]
    D3D11_VIDEO_PROCESSOR_ROTATION* pRotation,
  );

}

mixin DEFINE_GUID!(ID3D11VideoDevice, "10EC4D5B-975A-4689-B9E4-D0AAC30FE333");
// [uuid("10EC4D5B-975A-4689-B9E4-D0AAC30FE333")][object][local][pointer_default("unique")]
interface ID3D11VideoDevice : IUnknown
{
extern(Windows):

  HRESULT CreateVideoDecoder(
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_DESC* pVideoDesc,
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_CONFIG* pConfig,
    // [annotation("_COM_Outptr_")]
    ID3D11VideoDecoder* ppDecoder,
  );

  HRESULT CreateVideoProcessor(
    // [annotation("_In_")]
    ID3D11VideoProcessorEnumerator pEnum,
    // [annotation("_In_")]
    UINT RateConversionIndex,
    // [annotation("_COM_Outptr_")]
    ID3D11VideoProcessor* ppVideoProcessor,
  );

  HRESULT CreateAuthenticatedChannel(
    // [annotation("_In_")]
    D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType,
    // [annotation("_COM_Outptr_")]
    ID3D11AuthenticatedChannel* ppAuthenticatedChannel,
  );

  HRESULT CreateCryptoSession(
    // [annotation("_In_")]
    in GUID* pCryptoType,
    // [annotation("_In_opt_")]
    in GUID* pDecoderProfile,
    // [annotation("_In_")]
    in GUID* pKeyExchangeType,
    // [annotation("_COM_Outptr_")]
    ID3D11CryptoSession* ppCryptoSession,
  );

  HRESULT CreateVideoDecoderOutputView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11VideoDecoderOutputView* ppVDOVView,
  );

  HRESULT CreateVideoProcessorInputView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_")]
    ID3D11VideoProcessorEnumerator pEnum,
    // [annotation("_In_")]
    in D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11VideoProcessorInputView* ppVPIView,
  );

  HRESULT CreateVideoProcessorOutputView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_")]
    ID3D11VideoProcessorEnumerator pEnum,
    // [annotation("_In_")]
    in D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11VideoProcessorOutputView* ppVPOView,
  );

  HRESULT CreateVideoProcessorEnumerator(
    // [annotation("_In_")]
    in D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pDesc,
    // [annotation("_COM_Outptr_")]
    ID3D11VideoProcessorEnumerator* ppEnum,
  );

  UINT GetVideoDecoderProfileCount(  );

  HRESULT GetVideoDecoderProfile(
    // [annotation("_In_")]
    UINT Index,
    // [annotation("_Out_")]
    GUID* pDecoderProfile,
  );

  HRESULT CheckVideoDecoderFormat(
    // [annotation("_In_")]
    in GUID* pDecoderProfile,
    // [annotation("_In_")]
    DXGI_FORMAT Format,
    // [annotation("_Out_")]
    BOOL* pSupported,
  );

  HRESULT GetVideoDecoderConfigCount(
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_DESC* pDesc,
    // [annotation("_Out_")]
    UINT* pCount,
  );

  HRESULT GetVideoDecoderConfig(
    // [annotation("_In_")]
    in D3D11_VIDEO_DECODER_DESC* pDesc,
    // [annotation("_In_")]
    UINT Index,
    // [annotation("_Out_")]
    D3D11_VIDEO_DECODER_CONFIG* pConfig,
  );

  HRESULT GetContentProtectionCaps(
    // [annotation("_In_opt_")]
    in GUID* pCryptoType,
    // [annotation("_In_opt_")]
    in GUID* pDecoderProfile,
    // [annotation("_Out_")]
    D3D11_VIDEO_CONTENT_PROTECTION_CAPS* pCaps,
  );

  HRESULT CheckCryptoKeyExchange(
    // [annotation("_In_")]
    in GUID* pCryptoType,
    // [annotation("_In_opt_")]
    in GUID* pDecoderProfile,
    // [annotation("_In_")]
    UINT Index,
    // [annotation("_Out_")]
    GUID* pKeyExchangeType,
  );

  HRESULT SetPrivateData(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_reads_bytes_opt_(DataSize)")]
    in void* pData,
  );

  HRESULT SetPrivateDataInterface(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_opt_")]
    in IUnknown* pData,
  );

}

mixin DEFINE_GUID!(ID3D11Device, "db6f6ddb-ac77-4e88-8253-819df9bbf140");
// [uuid("db6f6ddb-ac77-4e88-8253-819df9bbf140")][object][local][pointer_default("unique")]
interface ID3D11Device : IUnknown
{
extern(Windows):

  HRESULT CreateBuffer(
    // [annotation("_In_")]
    in D3D11_BUFFER_DESC* pDesc,
    // [annotation("_In_opt_")]
    in D3D11_SUBRESOURCE_DATA* pInitialData,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Buffer* ppBuffer,
  );

  HRESULT CreateTexture1D(
    // [annotation("_In_")]
    in D3D11_TEXTURE1D_DESC* pDesc,
    // [annotation("_In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))")]
    in D3D11_SUBRESOURCE_DATA* pInitialData,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Texture1D* ppTexture1D,
  );

  HRESULT CreateTexture2D(
    // [annotation("_In_")]
    in D3D11_TEXTURE2D_DESC* pDesc,
    // [annotation("_In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))")]
    in D3D11_SUBRESOURCE_DATA* pInitialData,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Texture2D* ppTexture2D,
  );

  HRESULT CreateTexture3D(
    // [annotation("_In_")]
    in D3D11_TEXTURE3D_DESC* pDesc,
    // [annotation("_In_reads_opt_(_Inexpressible_(pDesc->MipLevels))")]
    in D3D11_SUBRESOURCE_DATA* pInitialData,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Texture3D* ppTexture3D,
  );

  HRESULT CreateShaderResourceView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_opt_")]
    in D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11ShaderResourceView* ppSRView,
  );

  HRESULT CreateUnorderedAccessView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_opt_")]
    in D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11UnorderedAccessView* ppUAView,
  );

  HRESULT CreateRenderTargetView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_opt_")]
    in D3D11_RENDER_TARGET_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11RenderTargetView* ppRTView,
  );

  HRESULT CreateDepthStencilView(
    // [annotation("_In_")]
    ID3D11Resource pResource,
    // [annotation("_In_opt_")]
    in D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11DepthStencilView* ppDepthStencilView,
  );

  HRESULT CreateInputLayout(
    // [annotation("_In_reads_(NumElements)")]
    in D3D11_INPUT_ELEMENT_DESC* pInputElementDescs,
    // [annotation("_In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )")]
    UINT NumElements,
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecodeWithInputSignature,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11InputLayout* ppInputLayout,
  );

  HRESULT CreateVertexShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11VertexShader* ppVertexShader,
  );

  HRESULT CreateGeometryShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11GeometryShader* ppGeometryShader,
  );

  HRESULT CreateGeometryShaderWithStreamOutput(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_reads_opt_(NumEntries)")]
    in D3D11_SO_DECLARATION_ENTRY* pSODeclaration,
    // [annotation("_In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )")]
    UINT NumEntries,
    // [annotation("_In_reads_opt_(NumStrides)")]
    in UINT* pBufferStrides,
    // [annotation("_In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )")]
    UINT NumStrides,
    // [annotation("_In_")]
    UINT RasterizedStream,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11GeometryShader* ppGeometryShader,
  );

  HRESULT CreatePixelShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11PixelShader* ppPixelShader,
  );

  HRESULT CreateHullShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11HullShader* ppHullShader,
  );

  HRESULT CreateDomainShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11DomainShader* ppDomainShader,
  );

  HRESULT CreateComputeShader(
    // [annotation("_In_reads_(BytecodeLength)")]
    in void* pShaderBytecode,
    // [annotation("_In_")]
    SIZE_T BytecodeLength,
    // [annotation("_In_opt_")]
    ID3D11ClassLinkage pClassLinkage,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11ComputeShader* ppComputeShader,
  );

  HRESULT CreateClassLinkage(
    // [annotation("_COM_Outptr_")]
    ID3D11ClassLinkage* ppLinkage,
  );

  HRESULT CreateBlendState(
    // [annotation("_In_")]
    in D3D11_BLEND_DESC* pBlendStateDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11BlendState* ppBlendState,
  );

  HRESULT CreateDepthStencilState(
    // [annotation("_In_")]
    in D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11DepthStencilState* ppDepthStencilState,
  );

  HRESULT CreateRasterizerState(
    // [annotation("_In_")]
    in D3D11_RASTERIZER_DESC* pRasterizerDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11RasterizerState* ppRasterizerState,
  );

  HRESULT CreateSamplerState(
    // [annotation("_In_")]
    in D3D11_SAMPLER_DESC* pSamplerDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11SamplerState* ppSamplerState,
  );

  HRESULT CreateQuery(
    // [annotation("_In_")]
    in D3D11_QUERY_DESC* pQueryDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Query* ppQuery,
  );

  HRESULT CreatePredicate(
    // [annotation("_In_")]
    in D3D11_QUERY_DESC* pPredicateDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Predicate* ppPredicate,
  );

  HRESULT CreateCounter(
    // [annotation("_In_")]
    in D3D11_COUNTER_DESC* pCounterDesc,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11Counter* ppCounter,
  );

  HRESULT CreateDeferredContext(
    UINT ContextFlags,
    // [annotation("_COM_Outptr_opt_")]
    ID3D11DeviceContext* ppDeferredContext,
  );

  HRESULT OpenSharedResource(
    // [annotation("_In_")]
    HANDLE hResource,
    // [annotation("_In_")]
    REFIID ReturnedInterface,
    // [annotation("_COM_Outptr_opt_")]
    void** ppResource,
  );

  HRESULT CheckFormatSupport(
    // [annotation("_In_")]
    DXGI_FORMAT Format,
    // [annotation("_Out_")]
    UINT* pFormatSupport,
  );

  HRESULT CheckMultisampleQualityLevels(
    // [annotation("_In_")]
    DXGI_FORMAT Format,
    // [annotation("_In_")]
    UINT SampleCount,
    // [annotation("_Out_")]
    UINT* pNumQualityLevels,
  );

  void CheckCounterInfo(
    // [annotation("_Out_")]
    D3D11_COUNTER_INFO* pCounterInfo,
  );

  HRESULT CheckCounter(
    // [annotation("_In_")]
    in D3D11_COUNTER_DESC* pDesc,
    // [annotation("_Out_")]
    D3D11_COUNTER_TYPE* pType,
    // [annotation("_Out_")]
    UINT* pActiveCounters,
    // [annotation("_Out_writes_opt_(*pNameLength)")]
    LPSTR szName,
    // [annotation("_Inout_opt_")]
    UINT* pNameLength,
    // [annotation("_Out_writes_opt_(*pUnitsLength)")]
    LPSTR szUnits,
    // [annotation("_Inout_opt_")]
    UINT* pUnitsLength,
    // [annotation("_Out_writes_opt_(*pDescriptionLength)")]
    LPSTR szDescription,
    // [annotation("_Inout_opt_")]
    UINT* pDescriptionLength,
  );

  HRESULT CheckFeatureSupport(
    D3D11_FEATURE Feature,
    // [annotation("_Out_writes_bytes_(FeatureSupportDataSize)")]
    void* pFeatureSupportData,
    UINT FeatureSupportDataSize,
  );

  HRESULT GetPrivateData(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_Inout_")]
    UINT* pDataSize,
    // [annotation("_Out_writes_bytes_opt_(*pDataSize)")]
    void* pData,
  );

  HRESULT SetPrivateData(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_")]
    UINT DataSize,
    // [annotation("_In_reads_bytes_opt_(DataSize)")]
    in void* pData,
  );

  HRESULT SetPrivateDataInterface(
    // [annotation("_In_")]
    REFGUID guid,
    // [annotation("_In_opt_")]
    in IUnknown* pData,
  );

  D3D_FEATURE_LEVEL GetFeatureLevel(  );

  UINT GetCreationFlags(  );

  HRESULT GetDeviceRemovedReason(  );

  void GetImmediateContext(
    // [annotation("_Outptr_")]
    ID3D11DeviceContext* ppImmediateContext,
  );

  HRESULT SetExceptionMode(
    UINT RaiseFlags,
  );

  UINT GetExceptionMode(  );

}

alias D3D11_CREATE_DEVICE_FLAG = int;
enum : D3D11_CREATE_DEVICE_FLAG
{
  D3D11_CREATE_DEVICE_SINGLETHREADED                                = 0x1,
  D3D11_CREATE_DEVICE_DEBUG                                         = 0x2,
  D3D11_CREATE_DEVICE_SWITCH_TO_REF                                 = 0x4,
  D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS      = 0x8,
  D3D11_CREATE_DEVICE_BGRA_SUPPORT                                  = 0x20,
  D3D11_CREATE_DEVICE_DEBUGGABLE                                    = 0x40,
  D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x0080,
  D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT                           = 0x0100,
  D3D11_CREATE_DEVICE_VIDEO_SUPPORT                                 = 0x0800,
}

enum UINT D3D11_SDK_VERSION = 7;

// #include "d3d11sdklayers.h"

// #include "d3d10_1.h"
// #include "d3d10shader.h"
// #include "d3d10_1shader.h"
// #include "d3d10misc.h"
// #include "d3d10effect.h"

///////////////////////////////////////////////////////////////////////////
// D3D11CreateDevice
// ------------------
//
// pAdapter
//      If NULL, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-NULL, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter::RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      null.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// pFeatureLevels
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// ppDevice
//      Pointer to returned interface. May be NULL.
// pFeatureLevel
//      Pointer to returned feature level. May be NULL.
// ppImmediateContext
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          IDXGIAdapter::RegisterDriver
//          D3D11CreateDevice
//
///////////////////////////////////////////////////////////////////////////
alias PFN_D3D11_CREATE_DEVICE = extern(Windows) HRESULT function(IDXGIAdapter pAdapter,
                                                                 D3D_DRIVER_TYPE DriverType,
                                                                 HMODULE Software,
                                                                 UINT Flags,
                                                                 in D3D_FEATURE_LEVEL* pFeatureLevels,
                                                                 UINT FeatureLevels,
                                                                 UINT SDKVersion,
                                                                 ID3D11Device* ppDevice,
                                                                 D3D_FEATURE_LEVEL* pFeatureLevel,
                                                                 ID3D11DeviceContext* ppImmediateContext);

extern(Windows) HRESULT D3D11CreateDevice(IDXGIAdapter pAdapter,
                                          D3D_DRIVER_TYPE DriverType,
                                          HMODULE Software,
                                          UINT Flags,
                                          in D3D_FEATURE_LEVEL* pFeatureLevels,
                                          UINT FeatureLevels,
                                          UINT SDKVersion,
                                          ID3D11Device* ppDevice,
                                          D3D_FEATURE_LEVEL* pFeatureLevel,
                                          ID3D11DeviceContext* ppImmediateContext);

///////////////////////////////////////////////////////////////////////////
// D3D11CreateDeviceAndSwapChain
// ------------------------------
//
// ppAdapter
//      If NULL, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-NULL, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter::RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      null.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDevice.
// pFeatureLevels
//      Array of any of the following:
//          D3D_FEATURE_LEVEL_11_0
//          D3D_FEATURE_LEVEL_10_1
//          D3D_FEATURE_LEVEL_10_0
//          D3D_FEATURE_LEVEL_9_3
//          D3D_FEATURE_LEVEL_9_2
//          D3D_FEATURE_LEVEL_9_1
//      Order indicates sequence in which instantiation will be attempted. If
//      NULL, then the implied order is the same as previously listed (i.e.
//      prefer most features available).
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// pSwapChainDesc
//      Swap chain description, may be NULL.
// ppSwapChain
//      Pointer to returned interface. May be NULL.
// ppDevice
//      Pointer to returned interface. May be NULL.
// pFeatureLevel
//      Pointer to returned feature level. May be NULL.
// ppImmediateContext
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          IDXGIAdapter::RegisterDriver
//          D3D11CreateDevice
//          IDXGIFactory::CreateSwapChain
//
///////////////////////////////////////////////////////////////////////////
alias PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = extern(Windows) HRESULT function(IDXGIAdapter pAdapter,
                                                                                D3D_DRIVER_TYPE DriverType,
                                                                                HMODULE Software,
                                                                                UINT Flags,
                                                                                in D3D_FEATURE_LEVEL* pFeatureLevels,
                                                                                UINT FeatureLevels,
                                                                                UINT SDKVersion,
                                                                                in DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
                                                                                IDXGISwapChain* ppSwapChain,
                                                                                ID3D11Device* ppDevice,
                                                                                D3D_FEATURE_LEVEL* pFeatureLevel,
                                                                                ID3D11DeviceContext* ppImmediateContext);

extern(Windows) HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter pAdapter,
                                                      D3D_DRIVER_TYPE DriverType,
                                                      HMODULE Software,
                                                      UINT Flags,
                                                      in D3D_FEATURE_LEVEL* pFeatureLevels,
                                                      UINT FeatureLevels,
                                                      UINT SDKVersion,
                                                      in DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
                                                      IDXGISwapChain* ppSwapChain,
                                                      ID3D11Device* ppDevice,
                                                      D3D_FEATURE_LEVEL* pFeatureLevel,
                                                      ID3D11DeviceContext* ppImmediateContext);
